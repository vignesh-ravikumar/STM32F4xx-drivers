
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080025b0  080025b0  000125b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c0  080026c0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080026c0  080026c0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026c0  080026c0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c0  080026c0  000126c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026c4  080026c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080026c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000084  0800274c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  0800274c  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003820  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a65  00000000  00000000  000238ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000280  00000000  00000000  00024338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000218  00000000  00000000  000245b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000036d3  00000000  00000000  000247d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000026e1  00000000  00000000  00027ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bdd2  00000000  00000000  0002a584  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00036356  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000103c  00000000  00000000  000363d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002598 	.word	0x08002598

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08002598 	.word	0x08002598

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <USART2_Init>:

uint8_t g_data = 0;


void USART2_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <USART2_Init+0x3c>)
 80002c6:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <USART2_Init+0x40>)
 80002c8:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <USART2_Init+0x3c>)
 80002cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d0:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <USART2_Init+0x3c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <USART2_Init+0x3c>)
 80002da:	2202      	movs	r2, #2
 80002dc:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80002de:	4b07      	ldr	r3, [pc, #28]	; (80002fc <USART2_Init+0x3c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <USART2_Init+0x3c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002ea:	4b04      	ldr	r3, [pc, #16]	; (80002fc <USART2_Init+0x3c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 80002f0:	4802      	ldr	r0, [pc, #8]	; (80002fc <USART2_Init+0x3c>)
 80002f2:	f000 fecf 	bl	8001094 <USART_Init>
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	200000b0 	.word	0x200000b0
 8000300:	40004400 	.word	0x40004400

08000304 <USART2_GPIOInit>:

void 	USART2_GPIOInit(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <USART2_GPIOInit+0x40>)
 800030c:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800030e:	2302      	movs	r3, #2
 8000310:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000312:	2300      	movs	r3, #0
 8000314:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000316:	2301      	movs	r3, #1
 8000318:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800031a:	2302      	movs	r3, #2
 800031c:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 800031e:	2307      	movs	r3, #7
 8000320:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000322:	2302      	movs	r3, #2
 8000324:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fad9 	bl	80008e0 <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800032e:	2303      	movs	r3, #3
 8000330:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fad3 	bl	80008e0 <GPIO_Init>

}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40020000 	.word	0x40020000

08000348 <BtnGPIOInits>:

void BtnGPIOInits(){
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
	//button config
	GPIO_Handle_t GpioButton;
	memset(&GpioButton, 0, sizeof(GpioButton));
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	220c      	movs	r2, #12
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f001 f9d1 	bl	80016fc <memset>
	GpioButton.pGPIOx = GPIOC;
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <BtnGPIOInits+0x38>)
 800035c:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800035e:	230d      	movs	r3, #13
 8000360:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000362:	2300      	movs	r3, #0
 8000364:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000366:	2302      	movs	r3, #2
 8000368:	72bb      	strb	r3, [r7, #10]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PU_PD;
 800036a:	2300      	movs	r3, #0
 800036c:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioButton);
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fab5 	bl	80008e0 <GPIO_Init>
}
 8000376:	bf00      	nop
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40020800 	.word	0x40020800

08000384 <delay>:

void delay(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800038a:	2300      	movs	r3, #0
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	e002      	b.n	8000396 <delay+0x12>
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	3301      	adds	r3, #1
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a03      	ldr	r2, [pc, #12]	; (80003a8 <delay+0x24>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d9f8      	bls.n	8000390 <delay+0xc>
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	0003d08f 	.word	0x0003d08f

080003ac <main>:

int main(void)
{
 80003ac:	b590      	push	{r4, r7, lr}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	607b      	str	r3, [r7, #4]

	BtnGPIOInits();
 80003b6:	f7ff ffc7 	bl	8000348 <BtnGPIOInits>

	USART2_GPIOInit();
 80003ba:	f7ff ffa3 	bl	8000304 <USART2_GPIOInit>
    USART2_Init();
 80003be:	f7ff ff7f 	bl	80002c0 <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART2,ENABLE);
 80003c2:	2101      	movs	r1, #1
 80003c4:	2026      	movs	r0, #38	; 0x26
 80003c6:	f000 fd85 	bl	8000ed4 <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART2,ENABLE);
 80003ca:	2101      	movs	r1, #1
 80003cc:	482f      	ldr	r0, [pc, #188]	; (800048c <main+0xe0>)
 80003ce:	f000 fd4d 	bl	8000e6c <USART_PeripheralControl>

    printf("Application is running\n");
 80003d2:	482f      	ldr	r0, [pc, #188]	; (8000490 <main+0xe4>)
 80003d4:	f001 fa0e 	bl	80017f4 <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80003d8:	bf00      	nop
 80003da:	2100      	movs	r1, #0
 80003dc:	482d      	ldr	r0, [pc, #180]	; (8000494 <main+0xe8>)
 80003de:	f000 fbe1 	bl	8000ba4 <GPIO_ReadFromInputPin>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d0f8      	beq.n	80003da <main+0x2e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003e8:	f7ff ffcc 	bl	8000384 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	4b2a      	ldr	r3, [pc, #168]	; (8000498 <main+0xec>)
 80003f0:	fba3 1302 	umull	r1, r3, r3, r2
 80003f4:	0859      	lsrs	r1, r3, #1
 80003f6:	460b      	mov	r3, r1
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	440b      	add	r3, r1
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart2_handle,rx_buf,strlen(msg[cnt])) != USART_READY );
 8000400:	bf00      	nop
 8000402:	4a26      	ldr	r2, [pc, #152]	; (800049c <main+0xf0>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff00 	bl	8000210 <strlen>
 8000410:	4603      	mov	r3, r0
 8000412:	461a      	mov	r2, r3
 8000414:	4922      	ldr	r1, [pc, #136]	; (80004a0 <main+0xf4>)
 8000416:	4823      	ldr	r0, [pc, #140]	; (80004a4 <main+0xf8>)
 8000418:	f000 ff7f 	bl	800131a <USART_ReceiveDataIT>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d1ef      	bne.n	8000402 <main+0x56>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart2_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 8000422:	4a1e      	ldr	r2, [pc, #120]	; (800049c <main+0xf0>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800042a:	4a1c      	ldr	r2, [pc, #112]	; (800049c <main+0xf0>)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff feec 	bl	8000210 <strlen>
 8000438:	4603      	mov	r3, r0
 800043a:	461a      	mov	r2, r3
 800043c:	4621      	mov	r1, r4
 800043e:	4819      	ldr	r0, [pc, #100]	; (80004a4 <main+0xf8>)
 8000440:	f000 ff1e 	bl	8001280 <USART_SendData>

    	printf("Transmitted : %s\n",msg[cnt]);
 8000444:	4a15      	ldr	r2, [pc, #84]	; (800049c <main+0xf0>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800044c:	4619      	mov	r1, r3
 800044e:	4816      	ldr	r0, [pc, #88]	; (80004a8 <main+0xfc>)
 8000450:	f001 f95c 	bl	800170c <iprintf>


    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	while(rxCmplt != SET);
 8000454:	bf00      	nop
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <main+0x100>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d1fb      	bne.n	8000456 <main+0xaa>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 800045e:	4a0f      	ldr	r2, [pc, #60]	; (800049c <main+0xf0>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff fed2 	bl	8000210 <strlen>
 800046c:	4603      	mov	r3, r0
 800046e:	3301      	adds	r3, #1
 8000470:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <main+0xf4>)
 8000472:	2100      	movs	r1, #0
 8000474:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	printf("Received    : %s\n",rx_buf);
 8000476:	490a      	ldr	r1, [pc, #40]	; (80004a0 <main+0xf4>)
 8000478:	480d      	ldr	r0, [pc, #52]	; (80004b0 <main+0x104>)
 800047a:	f001 f947 	bl	800170c <iprintf>

    	//invalidate the flag
    	rxCmplt = RESET;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <main+0x100>)
 8000480:	2200      	movs	r2, #0
 8000482:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3301      	adds	r3, #1
 8000488:	607b      	str	r3, [r7, #4]
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800048a:	e7a5      	b.n	80003d8 <main+0x2c>
 800048c:	40004400 	.word	0x40004400
 8000490:	080025e8 	.word	0x080025e8
 8000494:	40020000 	.word	0x40020000
 8000498:	aaaaaaab 	.word	0xaaaaaaab
 800049c:	20000000 	.word	0x20000000
 80004a0:	200000d4 	.word	0x200000d4
 80004a4:	200000b0 	.word	0x200000b0
 80004a8:	08002600 	.word	0x08002600
 80004ac:	200000a0 	.word	0x200000a0
 80004b0:	08002614 	.word	0x08002614

080004b4 <USART2_IRQHandler>:
	return 0;
}


void USART2_IRQHandler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 80004b8:	4802      	ldr	r0, [pc, #8]	; (80004c4 <USART2_IRQHandler+0x10>)
 80004ba:	f000 ff53 	bl	8001364 <USART_IRQHandling>
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200000b0 	.word	0x200000b0

080004c8 <USART_ApplicationEventCallback>:


void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 80004d4:	78fb      	ldrb	r3, [r7, #3]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d102      	bne.n	80004e0 <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 80004da:	4b04      	ldr	r3, [pc, #16]	; (80004ec <USART_ApplicationEventCallback+0x24>)
 80004dc:	2201      	movs	r2, #1
 80004de:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	200000a0 	.word	0x200000a0

080004f0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <ITM_SendChar+0x44>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <ITM_SendChar+0x44>)
 8000500:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000504:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <ITM_SendChar+0x48>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <ITM_SendChar+0x48>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000512:	bf00      	nop
 8000514:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	2b00      	cmp	r3, #0
 8000520:	d0f8      	beq.n	8000514 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000522:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	6013      	str	r3, [r2, #0]
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	e000edfc 	.word	0xe000edfc
 8000538:	e0000e00 	.word	0xe0000e00

0800053c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	e00a      	b.n	8000564 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800054e:	f3af 8000 	nop.w
 8000552:	4601      	mov	r1, r0
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	60ba      	str	r2, [r7, #8]
 800055a:	b2ca      	uxtb	r2, r1
 800055c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	3301      	adds	r3, #1
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	697a      	ldr	r2, [r7, #20]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	429a      	cmp	r2, r3
 800056a:	dbf0      	blt.n	800054e <_read+0x12>
	}

return len;
 800056c:	687b      	ldr	r3, [r7, #4]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b086      	sub	sp, #24
 800057a:	af00      	add	r7, sp, #0
 800057c:	60f8      	str	r0, [r7, #12]
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	e009      	b.n	800059c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	1c5a      	adds	r2, r3, #1
 800058c:	60ba      	str	r2, [r7, #8]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ffad 	bl	80004f0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3301      	adds	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	697a      	ldr	r2, [r7, #20]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	dbf1      	blt.n	8000588 <_write+0x12>
	}
	return len;
 80005a4:	687b      	ldr	r3, [r7, #4]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <_close>:

int _close(int file)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
	return -1;
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005d4:	605a      	str	r2, [r3, #4]
	return 0;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr

080005e2 <_isatty>:

int _isatty(int file)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	return 1;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr

080005f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b085      	sub	sp, #20
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
	return 0;
 8000602:	2300      	movs	r3, #0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
	...

08000610 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <_sbrk+0x50>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d102      	bne.n	8000626 <_sbrk+0x16>
		heap_end = &end;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <_sbrk+0x50>)
 8000622:	4a10      	ldr	r2, [pc, #64]	; (8000664 <_sbrk+0x54>)
 8000624:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <_sbrk+0x50>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <_sbrk+0x50>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	466a      	mov	r2, sp
 8000636:	4293      	cmp	r3, r2
 8000638:	d907      	bls.n	800064a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800063a:	f001 f835 	bl	80016a8 <__errno>
 800063e:	4602      	mov	r2, r0
 8000640:	230c      	movs	r3, #12
 8000642:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	e006      	b.n	8000658 <_sbrk+0x48>
	}

	heap_end += incr;
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <_sbrk+0x50>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	4a03      	ldr	r2, [pc, #12]	; (8000660 <_sbrk+0x50>)
 8000654:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000656:	68fb      	ldr	r3, [r7, #12]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000a4 	.word	0x200000a4
 8000664:	200004d8 	.word	0x200004d8

08000668 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800066e:	490e      	ldr	r1, [pc, #56]	; (80006a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000670:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <LoopForever+0xe>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000684:	4c0b      	ldr	r4, [pc, #44]	; (80006b4 <LoopForever+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000692:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000696:	f001 f80d 	bl	80016b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069a:	f7ff fe87 	bl	80003ac <main>

0800069e <LoopForever>:

LoopForever:
    b LoopForever
 800069e:	e7fe      	b.n	800069e <LoopForever>
  ldr   r0, =_estack
 80006a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80006ac:	080026c8 	.word	0x080026c8
  ldr r2, =_sbss
 80006b0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80006b4:	200004d8 	.word	0x200004d8

080006b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC_IRQHandler>
	...

080006bc <GPIO_BASEADDR_TO_CODE>:
 * @return            -  port code
 *
 * @Note              -  none
 */

uint8_t GPIO_BASEADDR_TO_CODE (GPIO_RegDef_t *x){
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	  if(x==GPIOA){
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <GPIO_BASEADDR_TO_CODE+0x68>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d101      	bne.n	80006d0 <GPIO_BASEADDR_TO_CODE+0x14>
		  return 1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	e024      	b.n	800071a <GPIO_BASEADDR_TO_CODE+0x5e>
	  }
	  else if(x==GPIOB){
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a15      	ldr	r2, [pc, #84]	; (8000728 <GPIO_BASEADDR_TO_CODE+0x6c>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d101      	bne.n	80006dc <GPIO_BASEADDR_TO_CODE+0x20>
		  return 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	e01e      	b.n	800071a <GPIO_BASEADDR_TO_CODE+0x5e>
	  }
	  else if(x==GPIOC){
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <GPIO_BASEADDR_TO_CODE+0x70>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d101      	bne.n	80006e8 <GPIO_BASEADDR_TO_CODE+0x2c>
	  	  return 3;
 80006e4:	2303      	movs	r3, #3
 80006e6:	e018      	b.n	800071a <GPIO_BASEADDR_TO_CODE+0x5e>
	  }
	  else if(x==GPIOD){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <GPIO_BASEADDR_TO_CODE+0x74>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d101      	bne.n	80006f4 <GPIO_BASEADDR_TO_CODE+0x38>
	  	  return 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	e012      	b.n	800071a <GPIO_BASEADDR_TO_CODE+0x5e>
	  }
	  else if(x==GPIOE){
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <GPIO_BASEADDR_TO_CODE+0x78>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d101      	bne.n	8000700 <GPIO_BASEADDR_TO_CODE+0x44>
	  	  return 5;
 80006fc:	2305      	movs	r3, #5
 80006fe:	e00c      	b.n	800071a <GPIO_BASEADDR_TO_CODE+0x5e>
	  }
	  else if(x==GPIOF){
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <GPIO_BASEADDR_TO_CODE+0x7c>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d101      	bne.n	800070c <GPIO_BASEADDR_TO_CODE+0x50>
		  return 6;
 8000708:	2306      	movs	r3, #6
 800070a:	e006      	b.n	800071a <GPIO_BASEADDR_TO_CODE+0x5e>
	  }
	  else if(x==GPIOG){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <GPIO_BASEADDR_TO_CODE+0x80>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d101      	bne.n	8000718 <GPIO_BASEADDR_TO_CODE+0x5c>
		  return 7;
 8000714:	2307      	movs	r3, #7
 8000716:	e000      	b.n	800071a <GPIO_BASEADDR_TO_CODE+0x5e>
	  }
	  else{
		  return 0;
 8000718:	2300      	movs	r3, #0
	  }
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	40020000 	.word	0x40020000
 8000728:	40020400 	.word	0x40020400
 800072c:	40020800 	.word	0x40020800
 8000730:	40020c00 	.word	0x40020c00
 8000734:	40021000 	.word	0x40021000
 8000738:	40021400 	.word	0x40021400
 800073c:	40021800 	.word	0x40021800

08000740 <GPIO_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d157      	bne.n	8000802 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a59      	ldr	r2, [pc, #356]	; (80008bc <GPIO_PeriClockControl+0x17c>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d106      	bne.n	8000768 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800075a:	4b59      	ldr	r3, [pc, #356]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a58      	ldr	r2, [pc, #352]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 8000766:	e0a3      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB){
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a56      	ldr	r2, [pc, #344]	; (80008c4 <GPIO_PeriClockControl+0x184>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d106      	bne.n	800077e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000770:	4b53      	ldr	r3, [pc, #332]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000774:	4a52      	ldr	r2, [pc, #328]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800077c:	e098      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC){
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a51      	ldr	r2, [pc, #324]	; (80008c8 <GPIO_PeriClockControl+0x188>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d106      	bne.n	8000794 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000786:	4b4e      	ldr	r3, [pc, #312]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a4d      	ldr	r2, [pc, #308]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000792:	e08d      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a4d      	ldr	r2, [pc, #308]	; (80008cc <GPIO_PeriClockControl+0x18c>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d106      	bne.n	80007aa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800079c:	4b48      	ldr	r3, [pc, #288]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	4a47      	ldr	r2, [pc, #284]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007a8:	e082      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE){
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a48      	ldr	r2, [pc, #288]	; (80008d0 <GPIO_PeriClockControl+0x190>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d106      	bne.n	80007c0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80007b2:	4b43      	ldr	r3, [pc, #268]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a42      	ldr	r2, [pc, #264]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007be:	e077      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF){
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a44      	ldr	r2, [pc, #272]	; (80008d4 <GPIO_PeriClockControl+0x194>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d106      	bne.n	80007d6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80007c8:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	4a3c      	ldr	r2, [pc, #240]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 80007ce:	f043 0320 	orr.w	r3, r3, #32
 80007d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d4:	e06c      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG){
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a3f      	ldr	r2, [pc, #252]	; (80008d8 <GPIO_PeriClockControl+0x198>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d106      	bne.n	80007ec <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80007de:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a37      	ldr	r2, [pc, #220]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 80007e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ea:	e061      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH){
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a3b      	ldr	r2, [pc, #236]	; (80008dc <GPIO_PeriClockControl+0x19c>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d15d      	bne.n	80008b0 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80007f4:	4b32      	ldr	r3, [pc, #200]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 80007f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f8:	4a31      	ldr	r2, [pc, #196]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 80007fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000800:	e056      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a2d      	ldr	r2, [pc, #180]	; (80008bc <GPIO_PeriClockControl+0x17c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d106      	bne.n	8000818 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a2c      	ldr	r2, [pc, #176]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 8000810:	f023 0301 	bic.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000816:	e04b      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB){
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a2a      	ldr	r2, [pc, #168]	; (80008c4 <GPIO_PeriClockControl+0x184>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d106      	bne.n	800082e <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000820:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 8000822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000824:	4a26      	ldr	r2, [pc, #152]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 8000826:	f023 0302 	bic.w	r3, r3, #2
 800082a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800082c:	e040      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC){
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <GPIO_PeriClockControl+0x188>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d106      	bne.n	8000844 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 800083c:	f023 0304 	bic.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000842:	e035      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD){
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a21      	ldr	r2, [pc, #132]	; (80008cc <GPIO_PeriClockControl+0x18c>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d106      	bne.n	800085a <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 8000852:	f023 0308 	bic.w	r3, r3, #8
 8000856:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000858:	e02a      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE){
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <GPIO_PeriClockControl+0x190>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d106      	bne.n	8000870 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 8000868:	f023 0310 	bic.w	r3, r3, #16
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800086e:	e01f      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <GPIO_PeriClockControl+0x194>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d106      	bne.n	8000886 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 800087e:	f023 0320 	bic.w	r3, r3, #32
 8000882:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000884:	e014      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <GPIO_PeriClockControl+0x198>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d106      	bne.n	800089c <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 8000894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
}
 800089a:	e009      	b.n	80008b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH){
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <GPIO_PeriClockControl+0x19c>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d105      	bne.n	80008b0 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <GPIO_PeriClockControl+0x180>)
 80008aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40020000 	.word	0x40020000
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020400 	.word	0x40020400
 80008c8:	40020800 	.word	0x40020800
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40021400 	.word	0x40021400
 80008d8:	40021800 	.word	0x40021800
 80008dc:	40021c00 	.word	0x40021c00

080008e0 <GPIO_Init>:
 * @return            -
 *
 * @Note              -
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	//enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2101      	movs	r1, #1
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff26 	bl	8000740 <GPIO_PeriClockControl>

	//1. configure the mode
	uint32_t temp = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
	if((pGPIOHandle->GPIO_PinConfig).GPIO_PinMode <= GPIO_MODE_ANALOG){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	795b      	ldrb	r3, [r3, #5]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d81f      	bhi.n	8000940 <GPIO_Init+0x60>
		//non-interrupt node

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	795b      	ldrb	r3, [r3, #5]
 8000904:	461a      	mov	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	791b      	ldrb	r3, [r3, #4]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);						//clearing
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	4619      	mov	r1, r3
 800091e:	2303      	movs	r3, #3
 8000920:	408b      	lsls	r3, r1
 8000922:	43db      	mvns	r3, r3
 8000924:	4619      	mov	r1, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	400a      	ands	r2, r1
 800092c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;																		//setting
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6819      	ldr	r1, [r3, #0]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	430a      	orrs	r2, r1
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	e07d      	b.n	8000a3c <GPIO_Init+0x15c>

	}
	else{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	795b      	ldrb	r3, [r3, #5]
 8000944:	2b04      	cmp	r3, #4
 8000946:	d117      	bne.n	8000978 <GPIO_Init+0x98>
			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000948:	4b93      	ldr	r3, [pc, #588]	; (8000b98 <GPIO_Init+0x2b8>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	7912      	ldrb	r2, [r2, #4]
 8000950:	4611      	mov	r1, r2
 8000952:	2201      	movs	r2, #1
 8000954:	408a      	lsls	r2, r1
 8000956:	4611      	mov	r1, r2
 8000958:	4a8f      	ldr	r2, [pc, #572]	; (8000b98 <GPIO_Init+0x2b8>)
 800095a:	430b      	orrs	r3, r1
 800095c:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800095e:	4b8e      	ldr	r3, [pc, #568]	; (8000b98 <GPIO_Init+0x2b8>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	7912      	ldrb	r2, [r2, #4]
 8000966:	4611      	mov	r1, r2
 8000968:	2201      	movs	r2, #1
 800096a:	408a      	lsls	r2, r1
 800096c:	43d2      	mvns	r2, r2
 800096e:	4611      	mov	r1, r2
 8000970:	4a89      	ldr	r2, [pc, #548]	; (8000b98 <GPIO_Init+0x2b8>)
 8000972:	400b      	ands	r3, r1
 8000974:	6093      	str	r3, [r2, #8]
 8000976:	e035      	b.n	80009e4 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	795b      	ldrb	r3, [r3, #5]
 800097c:	2b05      	cmp	r3, #5
 800097e:	d117      	bne.n	80009b0 <GPIO_Init+0xd0>
			//1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000980:	4b85      	ldr	r3, [pc, #532]	; (8000b98 <GPIO_Init+0x2b8>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	7912      	ldrb	r2, [r2, #4]
 8000988:	4611      	mov	r1, r2
 800098a:	2201      	movs	r2, #1
 800098c:	408a      	lsls	r2, r1
 800098e:	4611      	mov	r1, r2
 8000990:	4a81      	ldr	r2, [pc, #516]	; (8000b98 <GPIO_Init+0x2b8>)
 8000992:	430b      	orrs	r3, r1
 8000994:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000996:	4b80      	ldr	r3, [pc, #512]	; (8000b98 <GPIO_Init+0x2b8>)
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	7912      	ldrb	r2, [r2, #4]
 800099e:	4611      	mov	r1, r2
 80009a0:	2201      	movs	r2, #1
 80009a2:	408a      	lsls	r2, r1
 80009a4:	43d2      	mvns	r2, r2
 80009a6:	4611      	mov	r1, r2
 80009a8:	4a7b      	ldr	r2, [pc, #492]	; (8000b98 <GPIO_Init+0x2b8>)
 80009aa:	400b      	ands	r3, r1
 80009ac:	60d3      	str	r3, [r2, #12]
 80009ae:	e019      	b.n	80009e4 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	795b      	ldrb	r3, [r3, #5]
 80009b4:	2b06      	cmp	r3, #6
 80009b6:	d115      	bne.n	80009e4 <GPIO_Init+0x104>
			//1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009b8:	4b77      	ldr	r3, [pc, #476]	; (8000b98 <GPIO_Init+0x2b8>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	7912      	ldrb	r2, [r2, #4]
 80009c0:	4611      	mov	r1, r2
 80009c2:	2201      	movs	r2, #1
 80009c4:	408a      	lsls	r2, r1
 80009c6:	4611      	mov	r1, r2
 80009c8:	4a73      	ldr	r2, [pc, #460]	; (8000b98 <GPIO_Init+0x2b8>)
 80009ca:	430b      	orrs	r3, r1
 80009cc:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009ce:	4b72      	ldr	r3, [pc, #456]	; (8000b98 <GPIO_Init+0x2b8>)
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	7912      	ldrb	r2, [r2, #4]
 80009d6:	4611      	mov	r1, r2
 80009d8:	2201      	movs	r2, #1
 80009da:	408a      	lsls	r2, r1
 80009dc:	4611      	mov	r1, r2
 80009de:	4a6e      	ldr	r2, [pc, #440]	; (8000b98 <GPIO_Init+0x2b8>)
 80009e0:	430b      	orrs	r3, r1
 80009e2:	6093      	str	r3, [r2, #8]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	791b      	ldrb	r3, [r3, #4]
 80009e8:	089b      	lsrs	r3, r3, #2
 80009ea:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4)*4;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	791b      	ldrb	r3, [r3, #4]
 80009f0:	f003 0303 	and.w	r3, r3, #3
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fe5c 	bl	80006bc <GPIO_BASEADDR_TO_CODE>
 8000a04:	4603      	mov	r3, r0
 8000a06:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000a08:	4b64      	ldr	r3, [pc, #400]	; (8000b9c <GPIO_Init+0x2bc>)
 8000a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0c:	4a63      	ldr	r2, [pc, #396]	; (8000b9c <GPIO_Init+0x2bc>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a12:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << temp2;
 8000a14:	7a7a      	ldrb	r2, [r7, #9]
 8000a16:	7abb      	ldrb	r3, [r7, #10]
 8000a18:	fa02 f103 	lsl.w	r1, r2, r3
 8000a1c:	4a60      	ldr	r2, [pc, #384]	; (8000ba0 <GPIO_Init+0x2c0>)
 8000a1e:	7afb      	ldrb	r3, [r7, #11]
 8000a20:	3302      	adds	r3, #2
 8000a22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a26:	4b5c      	ldr	r3, [pc, #368]	; (8000b98 <GPIO_Init+0x2b8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	7912      	ldrb	r2, [r2, #4]
 8000a2e:	4611      	mov	r1, r2
 8000a30:	2201      	movs	r2, #1
 8000a32:	408a      	lsls	r2, r1
 8000a34:	4611      	mov	r1, r2
 8000a36:	4a58      	ldr	r2, [pc, #352]	; (8000b98 <GPIO_Init+0x2b8>)
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
	//2. configure the speed

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	799b      	ldrb	r3, [r3, #6]
 8000a44:	461a      	mov	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	791b      	ldrb	r3, [r3, #4]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	689a      	ldr	r2, [r3, #8]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	791b      	ldrb	r3, [r3, #4]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	2303      	movs	r3, #3
 8000a60:	408b      	lsls	r3, r1
 8000a62:	43db      	mvns	r3, r3
 8000a64:	4619      	mov	r1, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	400a      	ands	r2, r1
 8000a6c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	6899      	ldr	r1, [r3, #8]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	609a      	str	r2, [r3, #8]

	temp  = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
	//3. configure the PuPd settings

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	79db      	ldrb	r3, [r3, #7]
 8000a86:	461a      	mov	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	791b      	ldrb	r3, [r3, #4]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	408b      	lsls	r3, r1
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	400a      	ands	r2, r1
 8000aae:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68d9      	ldr	r1, [r3, #12]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	430a      	orrs	r2, r1
 8000abe:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
	//4. configure the output type

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7a1b      	ldrb	r3, [r3, #8]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	791b      	ldrb	r3, [r3, #4]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	791b      	ldrb	r3, [r3, #4]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	408b      	lsls	r3, r1
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	400a      	ands	r2, r1
 8000aee:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6859      	ldr	r1, [r3, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	430a      	orrs	r2, r1
 8000afe:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
	//5. configure alternate functionality mode

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	795b      	ldrb	r3, [r3, #5]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d141      	bne.n	8000b90 <GPIO_Init+0x2b0>
		//configure alternate function registers
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8) ) );
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7a5b      	ldrb	r3, [r3, #9]
 8000b10:	461a      	mov	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	791b      	ldrb	r3, [r3, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	60fb      	str	r3, [r7, #12]
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <=7){
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	791b      	ldrb	r3, [r3, #4]
 8000b26:	2b07      	cmp	r3, #7
 8000b28:	d819      	bhi.n	8000b5e <GPIO_Init+0x27e>
			pGPIOHandle->pGPIOx->AFR[0] &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8) ) );
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	6a1a      	ldr	r2, [r3, #32]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	791b      	ldrb	r3, [r3, #4]
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	4619      	mov	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	400a      	ands	r2, r1
 8000b4a:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFR[0] |= temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6a19      	ldr	r1, [r3, #32]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	621a      	str	r2, [r3, #32]
		else{
			pGPIOHandle->pGPIOx->AFR[1] &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8) ) );
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
		}
	}
}
 8000b5c:	e018      	b.n	8000b90 <GPIO_Init+0x2b0>
			pGPIOHandle->pGPIOx->AFR[1] &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8) ) );
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	791b      	ldrb	r3, [r3, #4]
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	210f      	movs	r1, #15
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	4619      	mov	r1, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	400a      	ands	r2, r1
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40013c00 	.word	0x40013c00
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40013800 	.word	0x40013800

08000ba4 <GPIO_ReadFromInputPin>:
 * @return            -   0 or 1
 *
 * @Note              -
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	70fb      	strb	r3, [r7, #3]
	uint8_t	value;
	value = (uint8_t)( (pGPIOx->IDR  >>  PinNumber) & 0x00000001);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	691a      	ldr	r2, [r3, #16]
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
	return value;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <RCCGetOutputClock>:
#include "stm32f446re_rcc_driver.h"

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};

uint32_t RCCGetOutputClock(){
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
	return 0;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <RCC_GETPCLK1Value>:

uint32_t RCC_GETPCLK1Value(void){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;
	clksrc = ((RCC->CFGR >>2) & 0x3);
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <RCC_GETPCLK1Value+0x9c>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000bf0:	7a7b      	ldrb	r3, [r7, #9]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d102      	bne.n	8000bfc <RCC_GETPCLK1Value+0x20>
		SystemClk = 16000000;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <RCC_GETPCLK1Value+0xa0>)
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	e00b      	b.n	8000c14 <RCC_GETPCLK1Value+0x38>
	}
	else if(clksrc == 1){
 8000bfc:	7a7b      	ldrb	r3, [r7, #9]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d102      	bne.n	8000c08 <RCC_GETPCLK1Value+0x2c>
		SystemClk = 80000000;
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <RCC_GETPCLK1Value+0xa4>)
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	e005      	b.n	8000c14 <RCC_GETPCLK1Value+0x38>
	}
	else if(clksrc == 2){
 8000c08:	7a7b      	ldrb	r3, [r7, #9]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d102      	bne.n	8000c14 <RCC_GETPCLK1Value+0x38>
		SystemClk = RCCGetOutputClock();
 8000c0e:	f7ff ffde 	bl	8000bce <RCCGetOutputClock>
 8000c12:	60f8      	str	r0, [r7, #12]
	}

	//for ahb prescalar
	temp = (RCC->CFGR >> 4) & (0x0f);
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <RCC_GETPCLK1Value+0x9c>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	091b      	lsrs	r3, r3, #4
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	f003 030f 	and.w	r3, r3, #15
 8000c20:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 8000c22:	7a3b      	ldrb	r3, [r7, #8]
 8000c24:	2b07      	cmp	r3, #7
 8000c26:	d802      	bhi.n	8000c2e <RCC_GETPCLK1Value+0x52>
		ahbp = 1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	72fb      	strb	r3, [r7, #11]
 8000c2c:	e005      	b.n	8000c3a <RCC_GETPCLK1Value+0x5e>
	}
	else{
		ahbp = AHB_PreScaler[temp - 8];
 8000c2e:	7a3b      	ldrb	r3, [r7, #8]
 8000c30:	3b08      	subs	r3, #8
 8000c32:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <RCC_GETPCLK1Value+0xa8>)
 8000c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c38:	72fb      	strb	r3, [r7, #11]
	}


	//for apb prescalar
	temp = (RCC->CFGR >> 10) & (0x0f);
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <RCC_GETPCLK1Value+0x9c>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	0a9b      	lsrs	r3, r3, #10
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	723b      	strb	r3, [r7, #8]
	if(temp < 4){
 8000c48:	7a3b      	ldrb	r3, [r7, #8]
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d802      	bhi.n	8000c54 <RCC_GETPCLK1Value+0x78>
		apb1p = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	72bb      	strb	r3, [r7, #10]
 8000c52:	e004      	b.n	8000c5e <RCC_GETPCLK1Value+0x82>
	}
	else{
		apb1p = APB1_PreScaler[temp - 4];
 8000c54:	7a3b      	ldrb	r3, [r7, #8]
 8000c56:	3b04      	subs	r3, #4
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <RCC_GETPCLK1Value+0xac>)
 8000c5a:	5cd3      	ldrb	r3, [r2, r3]
 8000c5c:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8000c5e:	7afb      	ldrb	r3, [r7, #11]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c66:	7abb      	ldrb	r3, [r7, #10]
 8000c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6c:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000c6e:	687b      	ldr	r3, [r7, #4]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	00f42400 	.word	0x00f42400
 8000c80:	04c4b400 	.word	0x04c4b400
 8000c84:	2000000c 	.word	0x2000000c
 8000c88:	2000001c 	.word	0x2000001c

08000c8c <RCC_GETPCLK2Value>:

uint32_t RCC_GETPCLK2Value(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000c96:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <RCC_GETPCLK2Value+0x8c>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000ca4:	7a7b      	ldrb	r3, [r7, #9]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d102      	bne.n	8000cb0 <RCC_GETPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <RCC_GETPCLK2Value+0x90>)
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	e001      	b.n	8000cb4 <RCC_GETPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <RCC_GETPCLK2Value+0x94>)
 8000cb2:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <RCC_GETPCLK2Value+0x8c>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	091b      	lsrs	r3, r3, #4
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b07      	cmp	r3, #7
 8000cc4:	d802      	bhi.n	8000ccc <RCC_GETPCLK2Value+0x40>
	{
		ahbp = 1;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	72fb      	strb	r3, [r7, #11]
 8000cca:	e005      	b.n	8000cd8 <RCC_GETPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b08      	subs	r3, #8
 8000cd0:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <RCC_GETPCLK2Value+0x98>)
 8000cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cd6:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <RCC_GETPCLK2Value+0x8c>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	0b5b      	lsrs	r3, r3, #13
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d802      	bhi.n	8000cf0 <RCC_GETPCLK2Value+0x64>
	{
		apb2p = 1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	72bb      	strb	r3, [r7, #10]
 8000cee:	e004      	b.n	8000cfa <RCC_GETPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <RCC_GETPCLK2Value+0x9c>)
 8000cf6:	5cd3      	ldrb	r3, [r2, r3]
 8000cf8:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000cfa:	7afb      	ldrb	r3, [r7, #11]
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d02:	7abb      	ldrb	r3, [r7, #10]
 8000d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d08:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000d0a:	683b      	ldr	r3, [r7, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	00f42400 	.word	0x00f42400
 8000d20:	007a1200 	.word	0x007a1200
 8000d24:	2000000c 	.word	0x2000000c
 8000d28:	2000001c 	.word	0x2000001c

08000d2c <USART_PeriClockControl>:
 *      Author: 91883
 */

#include "stm32f446re_usart_driver.h"

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d141      	bne.n	8000dc2 <USART_PeriClockControl+0x96>
		if(pUSARTx== USART1){
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a43      	ldr	r2, [pc, #268]	; (8000e50 <USART_PeriClockControl+0x124>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d106      	bne.n	8000d54 <USART_PeriClockControl+0x28>
			USART1_PCLK_EN();
 8000d46:	4b43      	ldr	r3, [pc, #268]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a42      	ldr	r2, [pc, #264]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000d4c:	f043 0310 	orr.w	r3, r3, #16
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if(pUSARTx == USART6){
			USART6_PCLK_DI();
		}
	}
}
 8000d52:	e077      	b.n	8000e44 <USART_PeriClockControl+0x118>
		else if(pUSARTx== USART2){
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a40      	ldr	r2, [pc, #256]	; (8000e58 <USART_PeriClockControl+0x12c>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d106      	bne.n	8000d6a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000d5c:	4b3d      	ldr	r3, [pc, #244]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a3c      	ldr	r2, [pc, #240]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d68:	e06c      	b.n	8000e44 <USART_PeriClockControl+0x118>
		else if(pUSARTx== USART3){
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a3b      	ldr	r2, [pc, #236]	; (8000e5c <USART_PeriClockControl+0x130>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d106      	bne.n	8000d80 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000d72:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a37      	ldr	r2, [pc, #220]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d7e:	e061      	b.n	8000e44 <USART_PeriClockControl+0x118>
		else if(pUSARTx== UART4){
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a37      	ldr	r2, [pc, #220]	; (8000e60 <USART_PeriClockControl+0x134>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d106      	bne.n	8000d96 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000d88:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a31      	ldr	r2, [pc, #196]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000d8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d94:	e056      	b.n	8000e44 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART5){
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a32      	ldr	r2, [pc, #200]	; (8000e64 <USART_PeriClockControl+0x138>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d106      	bne.n	8000dac <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a2c      	ldr	r2, [pc, #176]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000daa:	e04b      	b.n	8000e44 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART6){
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a2e      	ldr	r2, [pc, #184]	; (8000e68 <USART_PeriClockControl+0x13c>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d147      	bne.n	8000e44 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000db4:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db8:	4a26      	ldr	r2, [pc, #152]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000dba:	f043 0320 	orr.w	r3, r3, #32
 8000dbe:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000dc0:	e040      	b.n	8000e44 <USART_PeriClockControl+0x118>
		if(pUSARTx== USART1){
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a22      	ldr	r2, [pc, #136]	; (8000e50 <USART_PeriClockControl+0x124>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d106      	bne.n	8000dd8 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a21      	ldr	r2, [pc, #132]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000dd0:	f023 0310 	bic.w	r3, r3, #16
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000dd6:	e035      	b.n	8000e44 <USART_PeriClockControl+0x118>
		else if(pUSARTx== USART2){
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a1f      	ldr	r2, [pc, #124]	; (8000e58 <USART_PeriClockControl+0x12c>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d106      	bne.n	8000dee <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000de6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000dea:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dec:	e02a      	b.n	8000e44 <USART_PeriClockControl+0x118>
		else if(pUSARTx== USART3){
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a1a      	ldr	r2, [pc, #104]	; (8000e5c <USART_PeriClockControl+0x130>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d106      	bne.n	8000e04 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e02:	e01f      	b.n	8000e44 <USART_PeriClockControl+0x118>
		else if(pUSARTx== UART4){
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <USART_PeriClockControl+0x134>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d106      	bne.n	8000e1a <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000e12:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000e16:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e18:	e014      	b.n	8000e44 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART5){
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <USART_PeriClockControl+0x138>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d106      	bne.n	8000e30 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000e28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e2e:	e009      	b.n	8000e44 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART6){
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <USART_PeriClockControl+0x13c>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d105      	bne.n	8000e44 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3c:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <USART_PeriClockControl+0x128>)
 8000e3e:	f023 0320 	bic.w	r3, r3, #32
 8000e42:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40011000 	.word	0x40011000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40004400 	.word	0x40004400
 8000e5c:	40004800 	.word	0x40004800
 8000e60:	40004c00 	.word	0x40004c00
 8000e64:	40005000 	.word	0x40005000
 8000e68:	40011400 	.word	0x40011400

08000e6c <USART_PeripheralControl>:

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000e78:	78fb      	ldrb	r3, [r7, #3]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d106      	bne.n	8000e8c <USART_PeripheralControl+0x20>
			pUSARTx->CR1 |= (1 << 13);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60da      	str	r2, [r3, #12]
		}
		else if(EnorDi == DISABLE){
			pUSARTx->CR1 &= ~(1 << 13);
		}
}
 8000e8a:	e008      	b.n	8000e9e <USART_PeripheralControl+0x32>
		else if(EnorDi == DISABLE){
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d105      	bne.n	8000e9e <USART_PeripheralControl+0x32>
			pUSARTx->CR1 &= ~(1 << 13);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60da      	str	r2, [r3, #12]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <USART_GetFlagStatus>:

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint32_t Flagbit){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & (1 << Flagbit) ){
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <USART_GetFlagStatus+0x20>
		return SET;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <USART_GetFlagStatus+0x22>
	}
	return RESET;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <USART_IRQInterruptConfig>:
 *
 * @return            -
 *
 * @Note              -
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	460a      	mov	r2, r1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 8000ee4:	79bb      	ldrb	r3, [r7, #6]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d15e      	bne.n	8000fa8 <USART_IRQInterruptConfig+0xd4>
		if(IRQNumber <= 31){
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b1f      	cmp	r3, #31
 8000eee:	d80a      	bhi.n	8000f06 <USART_IRQInterruptConfig+0x32>
			//configure ISER0 register
			*NVIC_ISER0 |= (1<<IRQNumber);
 8000ef0:	4b5f      	ldr	r3, [pc, #380]	; (8001070 <USART_IRQInterruptConfig+0x19c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	79fa      	ldrb	r2, [r7, #7]
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	4611      	mov	r1, r2
 8000efe:	4a5c      	ldr	r2, [pc, #368]	; (8001070 <USART_IRQInterruptConfig+0x19c>)
 8000f00:	430b      	orrs	r3, r1
 8000f02:	6013      	str	r3, [r2, #0]
		else if(IRQNumber == 96){
			//configure ICER3 register
			*NVIC_ICER3 |= (1<<(IRQNumber%96));
		}
	}
}
 8000f04:	e0ae      	b.n	8001064 <USART_IRQInterruptConfig+0x190>
		else if( (IRQNumber>31)  & (IRQNumber <=63) ){
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b1f      	cmp	r3, #31
 8000f0a:	bf8c      	ite	hi
 8000f0c:	2301      	movhi	r3, #1
 8000f0e:	2300      	movls	r3, #0
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b3f      	cmp	r3, #63	; 0x3f
 8000f16:	bf94      	ite	ls
 8000f18:	2301      	movls	r3, #1
 8000f1a:	2300      	movhi	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4013      	ands	r3, r2
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00c      	beq.n	8000f40 <USART_IRQInterruptConfig+0x6c>
			*NVIC_ISER1 |= (1<<(IRQNumber%32));
 8000f26:	4b53      	ldr	r3, [pc, #332]	; (8001074 <USART_IRQInterruptConfig+0x1a0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	79fa      	ldrb	r2, [r7, #7]
 8000f2c:	f002 021f 	and.w	r2, r2, #31
 8000f30:	2101      	movs	r1, #1
 8000f32:	fa01 f202 	lsl.w	r2, r1, r2
 8000f36:	4611      	mov	r1, r2
 8000f38:	4a4e      	ldr	r2, [pc, #312]	; (8001074 <USART_IRQInterruptConfig+0x1a0>)
 8000f3a:	430b      	orrs	r3, r1
 8000f3c:	6013      	str	r3, [r2, #0]
}
 8000f3e:	e091      	b.n	8001064 <USART_IRQInterruptConfig+0x190>
		else if( (IRQNumber>63) & (IRQNumber <= 95) ){
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b3f      	cmp	r3, #63	; 0x3f
 8000f44:	bf8c      	ite	hi
 8000f46:	2301      	movhi	r3, #1
 8000f48:	2300      	movls	r3, #0
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b5f      	cmp	r3, #95	; 0x5f
 8000f50:	bf94      	ite	ls
 8000f52:	2301      	movls	r3, #1
 8000f54:	2300      	movhi	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d00c      	beq.n	8000f7a <USART_IRQInterruptConfig+0xa6>
			*NVIC_ISER2 |= (1<<(IRQNumber%64));
 8000f60:	4b45      	ldr	r3, [pc, #276]	; (8001078 <USART_IRQInterruptConfig+0x1a4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	79fa      	ldrb	r2, [r7, #7]
 8000f66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f70:	4611      	mov	r1, r2
 8000f72:	4a41      	ldr	r2, [pc, #260]	; (8001078 <USART_IRQInterruptConfig+0x1a4>)
 8000f74:	430b      	orrs	r3, r1
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	e074      	b.n	8001064 <USART_IRQInterruptConfig+0x190>
		else if(IRQNumber == 96){
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b60      	cmp	r3, #96	; 0x60
 8000f7e:	d171      	bne.n	8001064 <USART_IRQInterruptConfig+0x190>
			*NVIC_ISER3 |= (1<<(IRQNumber%96));
 8000f80:	4b3e      	ldr	r3, [pc, #248]	; (800107c <USART_IRQInterruptConfig+0x1a8>)
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	79fa      	ldrb	r2, [r7, #7]
 8000f86:	4b3e      	ldr	r3, [pc, #248]	; (8001080 <USART_IRQInterruptConfig+0x1ac>)
 8000f88:	fba3 1302 	umull	r1, r3, r3, r2
 8000f8c:	0999      	lsrs	r1, r3, #6
 8000f8e:	460b      	mov	r3, r1
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	440b      	add	r3, r1
 8000f94:	015b      	lsls	r3, r3, #5
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	4093      	lsls	r3, r2
 8000fa0:	4a36      	ldr	r2, [pc, #216]	; (800107c <USART_IRQInterruptConfig+0x1a8>)
 8000fa2:	4303      	orrs	r3, r0
 8000fa4:	6013      	str	r3, [r2, #0]
}
 8000fa6:	e05d      	b.n	8001064 <USART_IRQInterruptConfig+0x190>
		if(IRQNumber <= 31){
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b1f      	cmp	r3, #31
 8000fac:	d80a      	bhi.n	8000fc4 <USART_IRQInterruptConfig+0xf0>
			*NVIC_ICER0 |= (1<<IRQNumber);
 8000fae:	4b35      	ldr	r3, [pc, #212]	; (8001084 <USART_IRQInterruptConfig+0x1b0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	79fa      	ldrb	r2, [r7, #7]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4a31      	ldr	r2, [pc, #196]	; (8001084 <USART_IRQInterruptConfig+0x1b0>)
 8000fbe:	430b      	orrs	r3, r1
 8000fc0:	6013      	str	r3, [r2, #0]
}
 8000fc2:	e04f      	b.n	8001064 <USART_IRQInterruptConfig+0x190>
		else if( (IRQNumber>31) & (IRQNumber <=63) ){
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b1f      	cmp	r3, #31
 8000fc8:	bf8c      	ite	hi
 8000fca:	2301      	movhi	r3, #1
 8000fcc:	2300      	movls	r3, #0
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b3f      	cmp	r3, #63	; 0x3f
 8000fd4:	bf94      	ite	ls
 8000fd6:	2301      	movls	r3, #1
 8000fd8:	2300      	movhi	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4013      	ands	r3, r2
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00c      	beq.n	8000ffe <USART_IRQInterruptConfig+0x12a>
			*NVIC_ICER1 |= (1<<(IRQNumber%32));
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <USART_IRQInterruptConfig+0x1b4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	79fa      	ldrb	r2, [r7, #7]
 8000fea:	f002 021f 	and.w	r2, r2, #31
 8000fee:	2101      	movs	r1, #1
 8000ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4a24      	ldr	r2, [pc, #144]	; (8001088 <USART_IRQInterruptConfig+0x1b4>)
 8000ff8:	430b      	orrs	r3, r1
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	e032      	b.n	8001064 <USART_IRQInterruptConfig+0x190>
		else if( (IRQNumber>63) & (IRQNumber <= 95) ){
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b3f      	cmp	r3, #63	; 0x3f
 8001002:	bf8c      	ite	hi
 8001004:	2301      	movhi	r3, #1
 8001006:	2300      	movls	r3, #0
 8001008:	b2da      	uxtb	r2, r3
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b5f      	cmp	r3, #95	; 0x5f
 800100e:	bf94      	ite	ls
 8001010:	2301      	movls	r3, #1
 8001012:	2300      	movhi	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4013      	ands	r3, r2
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00c      	beq.n	8001038 <USART_IRQInterruptConfig+0x164>
			*NVIC_ICER2 |= (1<<(IRQNumber%64));
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <USART_IRQInterruptConfig+0x1b8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001028:	2101      	movs	r1, #1
 800102a:	fa01 f202 	lsl.w	r2, r1, r2
 800102e:	4611      	mov	r1, r2
 8001030:	4a16      	ldr	r2, [pc, #88]	; (800108c <USART_IRQInterruptConfig+0x1b8>)
 8001032:	430b      	orrs	r3, r1
 8001034:	6013      	str	r3, [r2, #0]
}
 8001036:	e015      	b.n	8001064 <USART_IRQInterruptConfig+0x190>
		else if(IRQNumber == 96){
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b60      	cmp	r3, #96	; 0x60
 800103c:	d112      	bne.n	8001064 <USART_IRQInterruptConfig+0x190>
			*NVIC_ICER3 |= (1<<(IRQNumber%96));
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <USART_IRQInterruptConfig+0x1bc>)
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	79fa      	ldrb	r2, [r7, #7]
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <USART_IRQInterruptConfig+0x1ac>)
 8001046:	fba3 1302 	umull	r1, r3, r3, r2
 800104a:	0999      	lsrs	r1, r3, #6
 800104c:	460b      	mov	r3, r1
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	440b      	add	r3, r1
 8001052:	015b      	lsls	r3, r3, #5
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	2301      	movs	r3, #1
 800105c:	4093      	lsls	r3, r2
 800105e:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <USART_IRQInterruptConfig+0x1bc>)
 8001060:	4303      	orrs	r3, r0
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000e104 	.word	0xe000e104
 8001078:	e000e108 	.word	0xe000e108
 800107c:	e000e10c 	.word	0xe000e10c
 8001080:	aaaaaaab 	.word	0xaaaaaaab
 8001084:	e000e180 	.word	0xe000e180
 8001088:	e000e184 	.word	0xe000e184
 800108c:	e000e188 	.word	0xe000e188
 8001090:	e000e18c 	.word	0xe000e18c

08001094 <USART_Init>:
		USART6_REG_RESET();
	}
}

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2101      	movs	r1, #1
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fe40 	bl	8000d2c <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	791b      	ldrb	r3, [r3, #4]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d104      	bne.n	80010be <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << 2);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	e010      	b.n	80010e0 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	791b      	ldrb	r3, [r3, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d104      	bne.n	80010d0 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << 3);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	e007      	b.n	80010e0 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	791b      	ldrb	r3, [r3, #4]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d103      	bne.n	80010e0 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << 2) | ( 1 << 3) );
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f043 030c 	orr.w	r3, r3, #12
 80010de:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << 12 ;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7b5b      	ldrb	r3, [r3, #13]
 80010e4:	031b      	lsls	r3, r3, #12
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]

    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7b9b      	ldrb	r3, [r3, #14]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d104      	bne.n	8001100 <USART_Init+0x6c>
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << 10);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	e00b      	b.n	8001118 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7b9b      	ldrb	r3, [r3, #14]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d107      	bne.n	8001118 <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << 10);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800110e:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << 9);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001116:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << 12;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7b1b      	ldrb	r3, [r3, #12]
 8001128:	031b      	lsls	r3, r3, #12
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7bdb      	ldrb	r3, [r3, #15]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d104      	bne.n	8001150 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << 9);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e014      	b.n	800117a <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7bdb      	ldrb	r3, [r3, #15]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d104      	bne.n	8001162 <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= (1 << 8);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e00b      	b.n	800117a <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7bdb      	ldrb	r3, [r3, #15]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d107      	bne.n	800117a <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << 9);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001170:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << 8);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001178:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR3 = tempreg;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f000 f805 	bl	800119c <USART_SetBaudRate>

}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <USART_SetBaudRate>:



void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a31      	ldr	r2, [pc, #196]	; (8001274 <USART_SetBaudRate+0xd8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d003      	beq.n	80011ba <USART_SetBaudRate+0x1e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a30      	ldr	r2, [pc, #192]	; (8001278 <USART_SetBaudRate+0xdc>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d103      	bne.n	80011c2 <USART_SetBaudRate+0x26>
	{
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GETPCLK2Value();
 80011ba:	f7ff fd67 	bl	8000c8c <RCC_GETPCLK2Value>
 80011be:	61f8      	str	r0, [r7, #28]
 80011c0:	e002      	b.n	80011c8 <USART_SetBaudRate+0x2c>
	}else
	{
		PCLKx = RCC_GETPCLK1Value();
 80011c2:	f7ff fd0b 	bl	8000bdc <RCC_GETPCLK1Value>
 80011c6:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << 15))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00b      	beq.n	80011ec <USART_SetBaudRate+0x50>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	009a      	lsls	r2, r3, #2
 80011de:	441a      	add	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	e00a      	b.n	8001202 <USART_SetBaudRate+0x66>
	}else
	{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	009a      	lsls	r2, r3, #2
 80011f6:	441a      	add	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001200:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <USART_SetBaudRate+0xe0>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2264      	movs	r2, #100	; 0x64
 800121c:	fb02 f303 	mul.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << 15))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00a      	beq.n	8001248 <USART_SetBaudRate+0xac>
	{
		//OVER8 = 1 , over sampling by 8
		F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	3332      	adds	r3, #50	; 0x32
 8001238:	4a10      	ldr	r2, [pc, #64]	; (800127c <USART_SetBaudRate+0xe0>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	e009      	b.n	800125c <USART_SetBaudRate+0xc0>

	}else
	{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	3332      	adds	r3, #50	; 0x32
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <USART_SetBaudRate+0xe0>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	095b      	lsrs	r3, r3, #5
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	617b      	str	r3, [r7, #20]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	609a      	str	r2, [r3, #8]
}
 800126a:	bf00      	nop
 800126c:	3720      	adds	r7, #32
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40011000 	.word	0x40011000
 8001278:	40011400 	.word	0x40011400
 800127c:	51eb851f 	.word	0x51eb851f

08001280 <USART_SendData>:

void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e031      	b.n	80012f6 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, 7));
 8001292:	bf00      	nop
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2107      	movs	r1, #7
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fe04 	bl	8000ea8 <USART_GetFlagStatus>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f6      	beq.n	8001294 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	7b5b      	ldrb	r3, [r3, #13]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d118      	bne.n	80012e0 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80012c0:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	7b9b      	ldrb	r3, [r3, #14]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d106      	bne.n	80012d8 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	3301      	adds	r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	3301      	adds	r3, #1
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	e00b      	b.n	80012f0 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	3301      	adds	r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	e007      	b.n	80012f0 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3c9      	bcc.n	8001292 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx, 6));
 80012fe:	bf00      	nop
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2106      	movs	r1, #6
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fdce 	bl	8000ea8 <USART_GetFlagStatus>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f6      	beq.n	8001300 <USART_SendData+0x80>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <USART_ReceiveDataIT>:

	return txstate;
}

uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 800131a:	b480      	push	{r7}
 800131c:	b087      	sub	sp, #28
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800132c:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 800132e:	7dfb      	ldrb	r3, [r7, #23]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d011      	beq.n	8001358 <USART_ReceiveDataIT+0x3e>
	{
		pUSARTHandle->RxLen = Len;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= (1 << 5);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0220 	orr.w	r2, r2, #32
 8001356:	60da      	str	r2, [r3, #12]
	}
	return rxstate;
 8001358:	7dfb      	ldrb	r3, [r7, #23]
}
 800135a:	4618      	mov	r0, r3
 800135c:	371c      	adds	r7, #28
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <USART_IRQHandling>:

void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << 6);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001376:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << 6);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001382:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d021      	beq.n	80013ce <USART_IRQHandling+0x6a>
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d01e      	beq.n	80013ce <USART_IRQHandling+0x6a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d119      	bne.n	80013ce <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d115      	bne.n	80013ce <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << 6);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013b0:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 80013c6:	2100      	movs	r1, #0
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff f87d 	bl	80004c8 <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << 7);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d8:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << 7);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e4:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d055      	beq.n	8001498 <USART_IRQHandling+0x134>
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d052      	beq.n	8001498 <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d14d      	bne.n	8001498 <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d03d      	beq.n	8001480 <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7b5b      	ldrb	r3, [r3, #13]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d129      	bne.n	8001460 <USART_IRQHandling+0xfc>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001420:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7b9b      	ldrb	r3, [r3, #14]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10f      	bne.n	800144a <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	1e9a      	subs	r2, r3, #2
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
 8001448:	e01a      	b.n	8001480 <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	619a      	str	r2, [r3, #24]
 800145e:	e00f      	b.n	8001480 <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	1e5a      	subs	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d107      	bne.n	8001498 <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << 7);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001496:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << 5);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << 5);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d073      	beq.n	800159e <USART_IRQHandling+0x23a>
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d070      	beq.n	800159e <USART_IRQHandling+0x23a>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d16b      	bne.n	800159e <USART_IRQHandling+0x23a>
		{
			if(pUSARTHandle->RxLen > 0)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d053      	beq.n	8001576 <USART_IRQHandling+0x212>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7b5b      	ldrb	r3, [r3, #13]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d12f      	bne.n	8001536 <USART_IRQHandling+0x1d2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7b9b      	ldrb	r3, [r3, #14]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d119      	bne.n	8001512 <USART_IRQHandling+0x1ae>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014ee:	b292      	uxth	r2, r2
 80014f0:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	1e9a      	subs	r2, r3, #2
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	61da      	str	r2, [r3, #28]
 8001510:	e031      	b.n	8001576 <USART_IRQHandling+0x212>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	1e5a      	subs	r2, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	61da      	str	r2, [r3, #28]
 8001534:	e01f      	b.n	8001576 <USART_IRQHandling+0x212>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7b9b      	ldrb	r3, [r3, #14]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d107      	bne.n	800154e <USART_IRQHandling+0x1ea>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	e009      	b.n	8001562 <USART_IRQHandling+0x1fe>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	615a      	str	r2, [r3, #20]
					pUSARTHandle->RxLen-=1;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	1e5a      	subs	r2, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10f      	bne.n	800159e <USART_IRQHandling+0x23a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << 5 );
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0220 	bic.w	r2, r2, #32
 800158c:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 8001596:	2101      	movs	r1, #1
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7fe ff95 	bl	80004c8 <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << 9);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a8:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << 9);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b4:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << 10);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c0:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00e      	beq.n	80015e6 <USART_IRQHandling+0x282>
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00b      	beq.n	80015e6 <USART_IRQHandling+0x282>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &=  ~( 1 << 9);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015dc:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 80015de:	2103      	movs	r1, #3
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7fe ff71 	bl	80004c8 <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << 4);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << 4);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00f      	beq.n	8001624 <USART_IRQHandling+0x2c0>
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00c      	beq.n	8001624 <USART_IRQHandling+0x2c0>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~( 1 << 4);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	f023 0310 	bic.w	r3, r3, #16
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 800161c:	2102      	movs	r1, #2
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7fe ff52 	bl	80004c8 <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & 3;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & 5;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f003 0305 	and.w	r3, r3, #5
 800163a:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <USART_IRQHandling+0x2ec>
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <USART_IRQHandling+0x2ec>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8001648:	2107      	movs	r1, #7
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7fe ff3c 	bl	80004c8 <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << 0) ;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	613b      	str	r3, [r7, #16]

	if(temp2 )
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d01e      	beq.n	80016a0 <USART_IRQHandling+0x33c>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << 1))
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <USART_IRQHandling+0x318>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 8001674:	2105      	movs	r1, #5
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7fe ff26 	bl	80004c8 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << 2) )
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <USART_IRQHandling+0x32a>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 8001686:	2106      	movs	r1, #6
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7fe ff1d 	bl	80004c8 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << 3) )
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <USART_IRQHandling+0x33c>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8001698:	2107      	movs	r1, #7
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7fe ff14 	bl	80004c8 <USART_ApplicationEventCallback>
		}
	}
	(void)temp3;

}
 80016a0:	bf00      	nop
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <__errno>:
 80016a8:	4b01      	ldr	r3, [pc, #4]	; (80016b0 <__errno+0x8>)
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000020 	.word	0x20000020

080016b4 <__libc_init_array>:
 80016b4:	b570      	push	{r4, r5, r6, lr}
 80016b6:	4e0d      	ldr	r6, [pc, #52]	; (80016ec <__libc_init_array+0x38>)
 80016b8:	4c0d      	ldr	r4, [pc, #52]	; (80016f0 <__libc_init_array+0x3c>)
 80016ba:	1ba4      	subs	r4, r4, r6
 80016bc:	10a4      	asrs	r4, r4, #2
 80016be:	2500      	movs	r5, #0
 80016c0:	42a5      	cmp	r5, r4
 80016c2:	d109      	bne.n	80016d8 <__libc_init_array+0x24>
 80016c4:	4e0b      	ldr	r6, [pc, #44]	; (80016f4 <__libc_init_array+0x40>)
 80016c6:	4c0c      	ldr	r4, [pc, #48]	; (80016f8 <__libc_init_array+0x44>)
 80016c8:	f000 ff66 	bl	8002598 <_init>
 80016cc:	1ba4      	subs	r4, r4, r6
 80016ce:	10a4      	asrs	r4, r4, #2
 80016d0:	2500      	movs	r5, #0
 80016d2:	42a5      	cmp	r5, r4
 80016d4:	d105      	bne.n	80016e2 <__libc_init_array+0x2e>
 80016d6:	bd70      	pop	{r4, r5, r6, pc}
 80016d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016dc:	4798      	blx	r3
 80016de:	3501      	adds	r5, #1
 80016e0:	e7ee      	b.n	80016c0 <__libc_init_array+0xc>
 80016e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016e6:	4798      	blx	r3
 80016e8:	3501      	adds	r5, #1
 80016ea:	e7f2      	b.n	80016d2 <__libc_init_array+0x1e>
 80016ec:	080026c0 	.word	0x080026c0
 80016f0:	080026c0 	.word	0x080026c0
 80016f4:	080026c0 	.word	0x080026c0
 80016f8:	080026c4 	.word	0x080026c4

080016fc <memset>:
 80016fc:	4402      	add	r2, r0
 80016fe:	4603      	mov	r3, r0
 8001700:	4293      	cmp	r3, r2
 8001702:	d100      	bne.n	8001706 <memset+0xa>
 8001704:	4770      	bx	lr
 8001706:	f803 1b01 	strb.w	r1, [r3], #1
 800170a:	e7f9      	b.n	8001700 <memset+0x4>

0800170c <iprintf>:
 800170c:	b40f      	push	{r0, r1, r2, r3}
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <iprintf+0x2c>)
 8001710:	b513      	push	{r0, r1, r4, lr}
 8001712:	681c      	ldr	r4, [r3, #0]
 8001714:	b124      	cbz	r4, 8001720 <iprintf+0x14>
 8001716:	69a3      	ldr	r3, [r4, #24]
 8001718:	b913      	cbnz	r3, 8001720 <iprintf+0x14>
 800171a:	4620      	mov	r0, r4
 800171c:	f000 fa22 	bl	8001b64 <__sinit>
 8001720:	ab05      	add	r3, sp, #20
 8001722:	9a04      	ldr	r2, [sp, #16]
 8001724:	68a1      	ldr	r1, [r4, #8]
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	4620      	mov	r0, r4
 800172a:	f000 fbd9 	bl	8001ee0 <_vfiprintf_r>
 800172e:	b002      	add	sp, #8
 8001730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001734:	b004      	add	sp, #16
 8001736:	4770      	bx	lr
 8001738:	20000020 	.word	0x20000020

0800173c <_puts_r>:
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	460e      	mov	r6, r1
 8001740:	4605      	mov	r5, r0
 8001742:	b118      	cbz	r0, 800174c <_puts_r+0x10>
 8001744:	6983      	ldr	r3, [r0, #24]
 8001746:	b90b      	cbnz	r3, 800174c <_puts_r+0x10>
 8001748:	f000 fa0c 	bl	8001b64 <__sinit>
 800174c:	69ab      	ldr	r3, [r5, #24]
 800174e:	68ac      	ldr	r4, [r5, #8]
 8001750:	b913      	cbnz	r3, 8001758 <_puts_r+0x1c>
 8001752:	4628      	mov	r0, r5
 8001754:	f000 fa06 	bl	8001b64 <__sinit>
 8001758:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <_puts_r+0xac>)
 800175a:	429c      	cmp	r4, r3
 800175c:	d117      	bne.n	800178e <_puts_r+0x52>
 800175e:	686c      	ldr	r4, [r5, #4]
 8001760:	89a3      	ldrh	r3, [r4, #12]
 8001762:	071b      	lsls	r3, r3, #28
 8001764:	d51d      	bpl.n	80017a2 <_puts_r+0x66>
 8001766:	6923      	ldr	r3, [r4, #16]
 8001768:	b1db      	cbz	r3, 80017a2 <_puts_r+0x66>
 800176a:	3e01      	subs	r6, #1
 800176c:	68a3      	ldr	r3, [r4, #8]
 800176e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001772:	3b01      	subs	r3, #1
 8001774:	60a3      	str	r3, [r4, #8]
 8001776:	b9e9      	cbnz	r1, 80017b4 <_puts_r+0x78>
 8001778:	2b00      	cmp	r3, #0
 800177a:	da2e      	bge.n	80017da <_puts_r+0x9e>
 800177c:	4622      	mov	r2, r4
 800177e:	210a      	movs	r1, #10
 8001780:	4628      	mov	r0, r5
 8001782:	f000 f83f 	bl	8001804 <__swbuf_r>
 8001786:	3001      	adds	r0, #1
 8001788:	d011      	beq.n	80017ae <_puts_r+0x72>
 800178a:	200a      	movs	r0, #10
 800178c:	e011      	b.n	80017b2 <_puts_r+0x76>
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <_puts_r+0xb0>)
 8001790:	429c      	cmp	r4, r3
 8001792:	d101      	bne.n	8001798 <_puts_r+0x5c>
 8001794:	68ac      	ldr	r4, [r5, #8]
 8001796:	e7e3      	b.n	8001760 <_puts_r+0x24>
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <_puts_r+0xb4>)
 800179a:	429c      	cmp	r4, r3
 800179c:	bf08      	it	eq
 800179e:	68ec      	ldreq	r4, [r5, #12]
 80017a0:	e7de      	b.n	8001760 <_puts_r+0x24>
 80017a2:	4621      	mov	r1, r4
 80017a4:	4628      	mov	r0, r5
 80017a6:	f000 f87f 	bl	80018a8 <__swsetup_r>
 80017aa:	2800      	cmp	r0, #0
 80017ac:	d0dd      	beq.n	800176a <_puts_r+0x2e>
 80017ae:	f04f 30ff 	mov.w	r0, #4294967295
 80017b2:	bd70      	pop	{r4, r5, r6, pc}
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	da04      	bge.n	80017c2 <_puts_r+0x86>
 80017b8:	69a2      	ldr	r2, [r4, #24]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	dc06      	bgt.n	80017cc <_puts_r+0x90>
 80017be:	290a      	cmp	r1, #10
 80017c0:	d004      	beq.n	80017cc <_puts_r+0x90>
 80017c2:	6823      	ldr	r3, [r4, #0]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	6022      	str	r2, [r4, #0]
 80017c8:	7019      	strb	r1, [r3, #0]
 80017ca:	e7cf      	b.n	800176c <_puts_r+0x30>
 80017cc:	4622      	mov	r2, r4
 80017ce:	4628      	mov	r0, r5
 80017d0:	f000 f818 	bl	8001804 <__swbuf_r>
 80017d4:	3001      	adds	r0, #1
 80017d6:	d1c9      	bne.n	800176c <_puts_r+0x30>
 80017d8:	e7e9      	b.n	80017ae <_puts_r+0x72>
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	200a      	movs	r0, #10
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	6022      	str	r2, [r4, #0]
 80017e2:	7018      	strb	r0, [r3, #0]
 80017e4:	e7e5      	b.n	80017b2 <_puts_r+0x76>
 80017e6:	bf00      	nop
 80017e8:	0800264c 	.word	0x0800264c
 80017ec:	0800266c 	.word	0x0800266c
 80017f0:	0800262c 	.word	0x0800262c

080017f4 <puts>:
 80017f4:	4b02      	ldr	r3, [pc, #8]	; (8001800 <puts+0xc>)
 80017f6:	4601      	mov	r1, r0
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	f7ff bf9f 	b.w	800173c <_puts_r>
 80017fe:	bf00      	nop
 8001800:	20000020 	.word	0x20000020

08001804 <__swbuf_r>:
 8001804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001806:	460e      	mov	r6, r1
 8001808:	4614      	mov	r4, r2
 800180a:	4605      	mov	r5, r0
 800180c:	b118      	cbz	r0, 8001816 <__swbuf_r+0x12>
 800180e:	6983      	ldr	r3, [r0, #24]
 8001810:	b90b      	cbnz	r3, 8001816 <__swbuf_r+0x12>
 8001812:	f000 f9a7 	bl	8001b64 <__sinit>
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <__swbuf_r+0x98>)
 8001818:	429c      	cmp	r4, r3
 800181a:	d12a      	bne.n	8001872 <__swbuf_r+0x6e>
 800181c:	686c      	ldr	r4, [r5, #4]
 800181e:	69a3      	ldr	r3, [r4, #24]
 8001820:	60a3      	str	r3, [r4, #8]
 8001822:	89a3      	ldrh	r3, [r4, #12]
 8001824:	071a      	lsls	r2, r3, #28
 8001826:	d52e      	bpl.n	8001886 <__swbuf_r+0x82>
 8001828:	6923      	ldr	r3, [r4, #16]
 800182a:	b363      	cbz	r3, 8001886 <__swbuf_r+0x82>
 800182c:	6923      	ldr	r3, [r4, #16]
 800182e:	6820      	ldr	r0, [r4, #0]
 8001830:	1ac0      	subs	r0, r0, r3
 8001832:	6963      	ldr	r3, [r4, #20]
 8001834:	b2f6      	uxtb	r6, r6
 8001836:	4283      	cmp	r3, r0
 8001838:	4637      	mov	r7, r6
 800183a:	dc04      	bgt.n	8001846 <__swbuf_r+0x42>
 800183c:	4621      	mov	r1, r4
 800183e:	4628      	mov	r0, r5
 8001840:	f000 f926 	bl	8001a90 <_fflush_r>
 8001844:	bb28      	cbnz	r0, 8001892 <__swbuf_r+0x8e>
 8001846:	68a3      	ldr	r3, [r4, #8]
 8001848:	3b01      	subs	r3, #1
 800184a:	60a3      	str	r3, [r4, #8]
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	6022      	str	r2, [r4, #0]
 8001852:	701e      	strb	r6, [r3, #0]
 8001854:	6963      	ldr	r3, [r4, #20]
 8001856:	3001      	adds	r0, #1
 8001858:	4283      	cmp	r3, r0
 800185a:	d004      	beq.n	8001866 <__swbuf_r+0x62>
 800185c:	89a3      	ldrh	r3, [r4, #12]
 800185e:	07db      	lsls	r3, r3, #31
 8001860:	d519      	bpl.n	8001896 <__swbuf_r+0x92>
 8001862:	2e0a      	cmp	r6, #10
 8001864:	d117      	bne.n	8001896 <__swbuf_r+0x92>
 8001866:	4621      	mov	r1, r4
 8001868:	4628      	mov	r0, r5
 800186a:	f000 f911 	bl	8001a90 <_fflush_r>
 800186e:	b190      	cbz	r0, 8001896 <__swbuf_r+0x92>
 8001870:	e00f      	b.n	8001892 <__swbuf_r+0x8e>
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <__swbuf_r+0x9c>)
 8001874:	429c      	cmp	r4, r3
 8001876:	d101      	bne.n	800187c <__swbuf_r+0x78>
 8001878:	68ac      	ldr	r4, [r5, #8]
 800187a:	e7d0      	b.n	800181e <__swbuf_r+0x1a>
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <__swbuf_r+0xa0>)
 800187e:	429c      	cmp	r4, r3
 8001880:	bf08      	it	eq
 8001882:	68ec      	ldreq	r4, [r5, #12]
 8001884:	e7cb      	b.n	800181e <__swbuf_r+0x1a>
 8001886:	4621      	mov	r1, r4
 8001888:	4628      	mov	r0, r5
 800188a:	f000 f80d 	bl	80018a8 <__swsetup_r>
 800188e:	2800      	cmp	r0, #0
 8001890:	d0cc      	beq.n	800182c <__swbuf_r+0x28>
 8001892:	f04f 37ff 	mov.w	r7, #4294967295
 8001896:	4638      	mov	r0, r7
 8001898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800189a:	bf00      	nop
 800189c:	0800264c 	.word	0x0800264c
 80018a0:	0800266c 	.word	0x0800266c
 80018a4:	0800262c 	.word	0x0800262c

080018a8 <__swsetup_r>:
 80018a8:	4b32      	ldr	r3, [pc, #200]	; (8001974 <__swsetup_r+0xcc>)
 80018aa:	b570      	push	{r4, r5, r6, lr}
 80018ac:	681d      	ldr	r5, [r3, #0]
 80018ae:	4606      	mov	r6, r0
 80018b0:	460c      	mov	r4, r1
 80018b2:	b125      	cbz	r5, 80018be <__swsetup_r+0x16>
 80018b4:	69ab      	ldr	r3, [r5, #24]
 80018b6:	b913      	cbnz	r3, 80018be <__swsetup_r+0x16>
 80018b8:	4628      	mov	r0, r5
 80018ba:	f000 f953 	bl	8001b64 <__sinit>
 80018be:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <__swsetup_r+0xd0>)
 80018c0:	429c      	cmp	r4, r3
 80018c2:	d10f      	bne.n	80018e4 <__swsetup_r+0x3c>
 80018c4:	686c      	ldr	r4, [r5, #4]
 80018c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	0715      	lsls	r5, r2, #28
 80018ce:	d42c      	bmi.n	800192a <__swsetup_r+0x82>
 80018d0:	06d0      	lsls	r0, r2, #27
 80018d2:	d411      	bmi.n	80018f8 <__swsetup_r+0x50>
 80018d4:	2209      	movs	r2, #9
 80018d6:	6032      	str	r2, [r6, #0]
 80018d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018dc:	81a3      	strh	r3, [r4, #12]
 80018de:	f04f 30ff 	mov.w	r0, #4294967295
 80018e2:	e03e      	b.n	8001962 <__swsetup_r+0xba>
 80018e4:	4b25      	ldr	r3, [pc, #148]	; (800197c <__swsetup_r+0xd4>)
 80018e6:	429c      	cmp	r4, r3
 80018e8:	d101      	bne.n	80018ee <__swsetup_r+0x46>
 80018ea:	68ac      	ldr	r4, [r5, #8]
 80018ec:	e7eb      	b.n	80018c6 <__swsetup_r+0x1e>
 80018ee:	4b24      	ldr	r3, [pc, #144]	; (8001980 <__swsetup_r+0xd8>)
 80018f0:	429c      	cmp	r4, r3
 80018f2:	bf08      	it	eq
 80018f4:	68ec      	ldreq	r4, [r5, #12]
 80018f6:	e7e6      	b.n	80018c6 <__swsetup_r+0x1e>
 80018f8:	0751      	lsls	r1, r2, #29
 80018fa:	d512      	bpl.n	8001922 <__swsetup_r+0x7a>
 80018fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018fe:	b141      	cbz	r1, 8001912 <__swsetup_r+0x6a>
 8001900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001904:	4299      	cmp	r1, r3
 8001906:	d002      	beq.n	800190e <__swsetup_r+0x66>
 8001908:	4630      	mov	r0, r6
 800190a:	f000 fa19 	bl	8001d40 <_free_r>
 800190e:	2300      	movs	r3, #0
 8001910:	6363      	str	r3, [r4, #52]	; 0x34
 8001912:	89a3      	ldrh	r3, [r4, #12]
 8001914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001918:	81a3      	strh	r3, [r4, #12]
 800191a:	2300      	movs	r3, #0
 800191c:	6063      	str	r3, [r4, #4]
 800191e:	6923      	ldr	r3, [r4, #16]
 8001920:	6023      	str	r3, [r4, #0]
 8001922:	89a3      	ldrh	r3, [r4, #12]
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	81a3      	strh	r3, [r4, #12]
 800192a:	6923      	ldr	r3, [r4, #16]
 800192c:	b94b      	cbnz	r3, 8001942 <__swsetup_r+0x9a>
 800192e:	89a3      	ldrh	r3, [r4, #12]
 8001930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001938:	d003      	beq.n	8001942 <__swsetup_r+0x9a>
 800193a:	4621      	mov	r1, r4
 800193c:	4630      	mov	r0, r6
 800193e:	f000 f9bf 	bl	8001cc0 <__smakebuf_r>
 8001942:	89a2      	ldrh	r2, [r4, #12]
 8001944:	f012 0301 	ands.w	r3, r2, #1
 8001948:	d00c      	beq.n	8001964 <__swsetup_r+0xbc>
 800194a:	2300      	movs	r3, #0
 800194c:	60a3      	str	r3, [r4, #8]
 800194e:	6963      	ldr	r3, [r4, #20]
 8001950:	425b      	negs	r3, r3
 8001952:	61a3      	str	r3, [r4, #24]
 8001954:	6923      	ldr	r3, [r4, #16]
 8001956:	b953      	cbnz	r3, 800196e <__swsetup_r+0xc6>
 8001958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800195c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001960:	d1ba      	bne.n	80018d8 <__swsetup_r+0x30>
 8001962:	bd70      	pop	{r4, r5, r6, pc}
 8001964:	0792      	lsls	r2, r2, #30
 8001966:	bf58      	it	pl
 8001968:	6963      	ldrpl	r3, [r4, #20]
 800196a:	60a3      	str	r3, [r4, #8]
 800196c:	e7f2      	b.n	8001954 <__swsetup_r+0xac>
 800196e:	2000      	movs	r0, #0
 8001970:	e7f7      	b.n	8001962 <__swsetup_r+0xba>
 8001972:	bf00      	nop
 8001974:	20000020 	.word	0x20000020
 8001978:	0800264c 	.word	0x0800264c
 800197c:	0800266c 	.word	0x0800266c
 8001980:	0800262c 	.word	0x0800262c

08001984 <__sflush_r>:
 8001984:	898a      	ldrh	r2, [r1, #12]
 8001986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800198a:	4605      	mov	r5, r0
 800198c:	0710      	lsls	r0, r2, #28
 800198e:	460c      	mov	r4, r1
 8001990:	d458      	bmi.n	8001a44 <__sflush_r+0xc0>
 8001992:	684b      	ldr	r3, [r1, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	dc05      	bgt.n	80019a4 <__sflush_r+0x20>
 8001998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800199a:	2b00      	cmp	r3, #0
 800199c:	dc02      	bgt.n	80019a4 <__sflush_r+0x20>
 800199e:	2000      	movs	r0, #0
 80019a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019a6:	2e00      	cmp	r6, #0
 80019a8:	d0f9      	beq.n	800199e <__sflush_r+0x1a>
 80019aa:	2300      	movs	r3, #0
 80019ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019b0:	682f      	ldr	r7, [r5, #0]
 80019b2:	6a21      	ldr	r1, [r4, #32]
 80019b4:	602b      	str	r3, [r5, #0]
 80019b6:	d032      	beq.n	8001a1e <__sflush_r+0x9a>
 80019b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019ba:	89a3      	ldrh	r3, [r4, #12]
 80019bc:	075a      	lsls	r2, r3, #29
 80019be:	d505      	bpl.n	80019cc <__sflush_r+0x48>
 80019c0:	6863      	ldr	r3, [r4, #4]
 80019c2:	1ac0      	subs	r0, r0, r3
 80019c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019c6:	b10b      	cbz	r3, 80019cc <__sflush_r+0x48>
 80019c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019ca:	1ac0      	subs	r0, r0, r3
 80019cc:	2300      	movs	r3, #0
 80019ce:	4602      	mov	r2, r0
 80019d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019d2:	6a21      	ldr	r1, [r4, #32]
 80019d4:	4628      	mov	r0, r5
 80019d6:	47b0      	blx	r6
 80019d8:	1c43      	adds	r3, r0, #1
 80019da:	89a3      	ldrh	r3, [r4, #12]
 80019dc:	d106      	bne.n	80019ec <__sflush_r+0x68>
 80019de:	6829      	ldr	r1, [r5, #0]
 80019e0:	291d      	cmp	r1, #29
 80019e2:	d848      	bhi.n	8001a76 <__sflush_r+0xf2>
 80019e4:	4a29      	ldr	r2, [pc, #164]	; (8001a8c <__sflush_r+0x108>)
 80019e6:	40ca      	lsrs	r2, r1
 80019e8:	07d6      	lsls	r6, r2, #31
 80019ea:	d544      	bpl.n	8001a76 <__sflush_r+0xf2>
 80019ec:	2200      	movs	r2, #0
 80019ee:	6062      	str	r2, [r4, #4]
 80019f0:	04d9      	lsls	r1, r3, #19
 80019f2:	6922      	ldr	r2, [r4, #16]
 80019f4:	6022      	str	r2, [r4, #0]
 80019f6:	d504      	bpl.n	8001a02 <__sflush_r+0x7e>
 80019f8:	1c42      	adds	r2, r0, #1
 80019fa:	d101      	bne.n	8001a00 <__sflush_r+0x7c>
 80019fc:	682b      	ldr	r3, [r5, #0]
 80019fe:	b903      	cbnz	r3, 8001a02 <__sflush_r+0x7e>
 8001a00:	6560      	str	r0, [r4, #84]	; 0x54
 8001a02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a04:	602f      	str	r7, [r5, #0]
 8001a06:	2900      	cmp	r1, #0
 8001a08:	d0c9      	beq.n	800199e <__sflush_r+0x1a>
 8001a0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a0e:	4299      	cmp	r1, r3
 8001a10:	d002      	beq.n	8001a18 <__sflush_r+0x94>
 8001a12:	4628      	mov	r0, r5
 8001a14:	f000 f994 	bl	8001d40 <_free_r>
 8001a18:	2000      	movs	r0, #0
 8001a1a:	6360      	str	r0, [r4, #52]	; 0x34
 8001a1c:	e7c0      	b.n	80019a0 <__sflush_r+0x1c>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	4628      	mov	r0, r5
 8001a22:	47b0      	blx	r6
 8001a24:	1c41      	adds	r1, r0, #1
 8001a26:	d1c8      	bne.n	80019ba <__sflush_r+0x36>
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0c5      	beq.n	80019ba <__sflush_r+0x36>
 8001a2e:	2b1d      	cmp	r3, #29
 8001a30:	d001      	beq.n	8001a36 <__sflush_r+0xb2>
 8001a32:	2b16      	cmp	r3, #22
 8001a34:	d101      	bne.n	8001a3a <__sflush_r+0xb6>
 8001a36:	602f      	str	r7, [r5, #0]
 8001a38:	e7b1      	b.n	800199e <__sflush_r+0x1a>
 8001a3a:	89a3      	ldrh	r3, [r4, #12]
 8001a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a40:	81a3      	strh	r3, [r4, #12]
 8001a42:	e7ad      	b.n	80019a0 <__sflush_r+0x1c>
 8001a44:	690f      	ldr	r7, [r1, #16]
 8001a46:	2f00      	cmp	r7, #0
 8001a48:	d0a9      	beq.n	800199e <__sflush_r+0x1a>
 8001a4a:	0793      	lsls	r3, r2, #30
 8001a4c:	680e      	ldr	r6, [r1, #0]
 8001a4e:	bf08      	it	eq
 8001a50:	694b      	ldreq	r3, [r1, #20]
 8001a52:	600f      	str	r7, [r1, #0]
 8001a54:	bf18      	it	ne
 8001a56:	2300      	movne	r3, #0
 8001a58:	eba6 0807 	sub.w	r8, r6, r7
 8001a5c:	608b      	str	r3, [r1, #8]
 8001a5e:	f1b8 0f00 	cmp.w	r8, #0
 8001a62:	dd9c      	ble.n	800199e <__sflush_r+0x1a>
 8001a64:	4643      	mov	r3, r8
 8001a66:	463a      	mov	r2, r7
 8001a68:	6a21      	ldr	r1, [r4, #32]
 8001a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	47b0      	blx	r6
 8001a70:	2800      	cmp	r0, #0
 8001a72:	dc06      	bgt.n	8001a82 <__sflush_r+0xfe>
 8001a74:	89a3      	ldrh	r3, [r4, #12]
 8001a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a7a:	81a3      	strh	r3, [r4, #12]
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	e78e      	b.n	80019a0 <__sflush_r+0x1c>
 8001a82:	4407      	add	r7, r0
 8001a84:	eba8 0800 	sub.w	r8, r8, r0
 8001a88:	e7e9      	b.n	8001a5e <__sflush_r+0xda>
 8001a8a:	bf00      	nop
 8001a8c:	20400001 	.word	0x20400001

08001a90 <_fflush_r>:
 8001a90:	b538      	push	{r3, r4, r5, lr}
 8001a92:	690b      	ldr	r3, [r1, #16]
 8001a94:	4605      	mov	r5, r0
 8001a96:	460c      	mov	r4, r1
 8001a98:	b1db      	cbz	r3, 8001ad2 <_fflush_r+0x42>
 8001a9a:	b118      	cbz	r0, 8001aa4 <_fflush_r+0x14>
 8001a9c:	6983      	ldr	r3, [r0, #24]
 8001a9e:	b90b      	cbnz	r3, 8001aa4 <_fflush_r+0x14>
 8001aa0:	f000 f860 	bl	8001b64 <__sinit>
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <_fflush_r+0x48>)
 8001aa6:	429c      	cmp	r4, r3
 8001aa8:	d109      	bne.n	8001abe <_fflush_r+0x2e>
 8001aaa:	686c      	ldr	r4, [r5, #4]
 8001aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ab0:	b17b      	cbz	r3, 8001ad2 <_fflush_r+0x42>
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001aba:	f7ff bf63 	b.w	8001984 <__sflush_r>
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <_fflush_r+0x4c>)
 8001ac0:	429c      	cmp	r4, r3
 8001ac2:	d101      	bne.n	8001ac8 <_fflush_r+0x38>
 8001ac4:	68ac      	ldr	r4, [r5, #8]
 8001ac6:	e7f1      	b.n	8001aac <_fflush_r+0x1c>
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <_fflush_r+0x50>)
 8001aca:	429c      	cmp	r4, r3
 8001acc:	bf08      	it	eq
 8001ace:	68ec      	ldreq	r4, [r5, #12]
 8001ad0:	e7ec      	b.n	8001aac <_fflush_r+0x1c>
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	bd38      	pop	{r3, r4, r5, pc}
 8001ad6:	bf00      	nop
 8001ad8:	0800264c 	.word	0x0800264c
 8001adc:	0800266c 	.word	0x0800266c
 8001ae0:	0800262c 	.word	0x0800262c

08001ae4 <std>:
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	b510      	push	{r4, lr}
 8001ae8:	4604      	mov	r4, r0
 8001aea:	e9c0 3300 	strd	r3, r3, [r0]
 8001aee:	6083      	str	r3, [r0, #8]
 8001af0:	8181      	strh	r1, [r0, #12]
 8001af2:	6643      	str	r3, [r0, #100]	; 0x64
 8001af4:	81c2      	strh	r2, [r0, #14]
 8001af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001afa:	6183      	str	r3, [r0, #24]
 8001afc:	4619      	mov	r1, r3
 8001afe:	2208      	movs	r2, #8
 8001b00:	305c      	adds	r0, #92	; 0x5c
 8001b02:	f7ff fdfb 	bl	80016fc <memset>
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <std+0x38>)
 8001b08:	6263      	str	r3, [r4, #36]	; 0x24
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <std+0x3c>)
 8001b0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <std+0x40>)
 8001b10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <std+0x44>)
 8001b14:	6224      	str	r4, [r4, #32]
 8001b16:	6323      	str	r3, [r4, #48]	; 0x30
 8001b18:	bd10      	pop	{r4, pc}
 8001b1a:	bf00      	nop
 8001b1c:	0800243d 	.word	0x0800243d
 8001b20:	0800245f 	.word	0x0800245f
 8001b24:	08002497 	.word	0x08002497
 8001b28:	080024bb 	.word	0x080024bb

08001b2c <_cleanup_r>:
 8001b2c:	4901      	ldr	r1, [pc, #4]	; (8001b34 <_cleanup_r+0x8>)
 8001b2e:	f000 b885 	b.w	8001c3c <_fwalk_reent>
 8001b32:	bf00      	nop
 8001b34:	08001a91 	.word	0x08001a91

08001b38 <__sfmoreglue>:
 8001b38:	b570      	push	{r4, r5, r6, lr}
 8001b3a:	1e4a      	subs	r2, r1, #1
 8001b3c:	2568      	movs	r5, #104	; 0x68
 8001b3e:	4355      	muls	r5, r2
 8001b40:	460e      	mov	r6, r1
 8001b42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b46:	f000 f949 	bl	8001ddc <_malloc_r>
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	b140      	cbz	r0, 8001b60 <__sfmoreglue+0x28>
 8001b4e:	2100      	movs	r1, #0
 8001b50:	e9c0 1600 	strd	r1, r6, [r0]
 8001b54:	300c      	adds	r0, #12
 8001b56:	60a0      	str	r0, [r4, #8]
 8001b58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001b5c:	f7ff fdce 	bl	80016fc <memset>
 8001b60:	4620      	mov	r0, r4
 8001b62:	bd70      	pop	{r4, r5, r6, pc}

08001b64 <__sinit>:
 8001b64:	6983      	ldr	r3, [r0, #24]
 8001b66:	b510      	push	{r4, lr}
 8001b68:	4604      	mov	r4, r0
 8001b6a:	bb33      	cbnz	r3, 8001bba <__sinit+0x56>
 8001b6c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001b70:	6503      	str	r3, [r0, #80]	; 0x50
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <__sinit+0x58>)
 8001b74:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <__sinit+0x5c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6282      	str	r2, [r0, #40]	; 0x28
 8001b7a:	4298      	cmp	r0, r3
 8001b7c:	bf04      	itt	eq
 8001b7e:	2301      	moveq	r3, #1
 8001b80:	6183      	streq	r3, [r0, #24]
 8001b82:	f000 f81f 	bl	8001bc4 <__sfp>
 8001b86:	6060      	str	r0, [r4, #4]
 8001b88:	4620      	mov	r0, r4
 8001b8a:	f000 f81b 	bl	8001bc4 <__sfp>
 8001b8e:	60a0      	str	r0, [r4, #8]
 8001b90:	4620      	mov	r0, r4
 8001b92:	f000 f817 	bl	8001bc4 <__sfp>
 8001b96:	2200      	movs	r2, #0
 8001b98:	60e0      	str	r0, [r4, #12]
 8001b9a:	2104      	movs	r1, #4
 8001b9c:	6860      	ldr	r0, [r4, #4]
 8001b9e:	f7ff ffa1 	bl	8001ae4 <std>
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2109      	movs	r1, #9
 8001ba6:	68a0      	ldr	r0, [r4, #8]
 8001ba8:	f7ff ff9c 	bl	8001ae4 <std>
 8001bac:	2202      	movs	r2, #2
 8001bae:	2112      	movs	r1, #18
 8001bb0:	68e0      	ldr	r0, [r4, #12]
 8001bb2:	f7ff ff97 	bl	8001ae4 <std>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61a3      	str	r3, [r4, #24]
 8001bba:	bd10      	pop	{r4, pc}
 8001bbc:	08002628 	.word	0x08002628
 8001bc0:	08001b2d 	.word	0x08001b2d

08001bc4 <__sfp>:
 8001bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <__sfp+0x70>)
 8001bc8:	681e      	ldr	r6, [r3, #0]
 8001bca:	69b3      	ldr	r3, [r6, #24]
 8001bcc:	4607      	mov	r7, r0
 8001bce:	b913      	cbnz	r3, 8001bd6 <__sfp+0x12>
 8001bd0:	4630      	mov	r0, r6
 8001bd2:	f7ff ffc7 	bl	8001b64 <__sinit>
 8001bd6:	3648      	adds	r6, #72	; 0x48
 8001bd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	d503      	bpl.n	8001be8 <__sfp+0x24>
 8001be0:	6833      	ldr	r3, [r6, #0]
 8001be2:	b133      	cbz	r3, 8001bf2 <__sfp+0x2e>
 8001be4:	6836      	ldr	r6, [r6, #0]
 8001be6:	e7f7      	b.n	8001bd8 <__sfp+0x14>
 8001be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001bec:	b16d      	cbz	r5, 8001c0a <__sfp+0x46>
 8001bee:	3468      	adds	r4, #104	; 0x68
 8001bf0:	e7f4      	b.n	8001bdc <__sfp+0x18>
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	4638      	mov	r0, r7
 8001bf6:	f7ff ff9f 	bl	8001b38 <__sfmoreglue>
 8001bfa:	6030      	str	r0, [r6, #0]
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d1f1      	bne.n	8001be4 <__sfp+0x20>
 8001c00:	230c      	movs	r3, #12
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	4604      	mov	r4, r0
 8001c06:	4620      	mov	r0, r4
 8001c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <__sfp+0x74>)
 8001c0c:	6665      	str	r5, [r4, #100]	; 0x64
 8001c0e:	e9c4 5500 	strd	r5, r5, [r4]
 8001c12:	60a5      	str	r5, [r4, #8]
 8001c14:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001c18:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	4629      	mov	r1, r5
 8001c20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001c24:	f7ff fd6a 	bl	80016fc <memset>
 8001c28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001c2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001c30:	e7e9      	b.n	8001c06 <__sfp+0x42>
 8001c32:	bf00      	nop
 8001c34:	08002628 	.word	0x08002628
 8001c38:	ffff0001 	.word	0xffff0001

08001c3c <_fwalk_reent>:
 8001c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c40:	4680      	mov	r8, r0
 8001c42:	4689      	mov	r9, r1
 8001c44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c48:	2600      	movs	r6, #0
 8001c4a:	b914      	cbnz	r4, 8001c52 <_fwalk_reent+0x16>
 8001c4c:	4630      	mov	r0, r6
 8001c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c52:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001c56:	3f01      	subs	r7, #1
 8001c58:	d501      	bpl.n	8001c5e <_fwalk_reent+0x22>
 8001c5a:	6824      	ldr	r4, [r4, #0]
 8001c5c:	e7f5      	b.n	8001c4a <_fwalk_reent+0xe>
 8001c5e:	89ab      	ldrh	r3, [r5, #12]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d907      	bls.n	8001c74 <_fwalk_reent+0x38>
 8001c64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	d003      	beq.n	8001c74 <_fwalk_reent+0x38>
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	4640      	mov	r0, r8
 8001c70:	47c8      	blx	r9
 8001c72:	4306      	orrs	r6, r0
 8001c74:	3568      	adds	r5, #104	; 0x68
 8001c76:	e7ee      	b.n	8001c56 <_fwalk_reent+0x1a>

08001c78 <__swhatbuf_r>:
 8001c78:	b570      	push	{r4, r5, r6, lr}
 8001c7a:	460e      	mov	r6, r1
 8001c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c80:	2900      	cmp	r1, #0
 8001c82:	b096      	sub	sp, #88	; 0x58
 8001c84:	4614      	mov	r4, r2
 8001c86:	461d      	mov	r5, r3
 8001c88:	da07      	bge.n	8001c9a <__swhatbuf_r+0x22>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	602b      	str	r3, [r5, #0]
 8001c8e:	89b3      	ldrh	r3, [r6, #12]
 8001c90:	061a      	lsls	r2, r3, #24
 8001c92:	d410      	bmi.n	8001cb6 <__swhatbuf_r+0x3e>
 8001c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c98:	e00e      	b.n	8001cb8 <__swhatbuf_r+0x40>
 8001c9a:	466a      	mov	r2, sp
 8001c9c:	f000 fc34 	bl	8002508 <_fstat_r>
 8001ca0:	2800      	cmp	r0, #0
 8001ca2:	dbf2      	blt.n	8001c8a <__swhatbuf_r+0x12>
 8001ca4:	9a01      	ldr	r2, [sp, #4]
 8001ca6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001caa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001cae:	425a      	negs	r2, r3
 8001cb0:	415a      	adcs	r2, r3
 8001cb2:	602a      	str	r2, [r5, #0]
 8001cb4:	e7ee      	b.n	8001c94 <__swhatbuf_r+0x1c>
 8001cb6:	2340      	movs	r3, #64	; 0x40
 8001cb8:	2000      	movs	r0, #0
 8001cba:	6023      	str	r3, [r4, #0]
 8001cbc:	b016      	add	sp, #88	; 0x58
 8001cbe:	bd70      	pop	{r4, r5, r6, pc}

08001cc0 <__smakebuf_r>:
 8001cc0:	898b      	ldrh	r3, [r1, #12]
 8001cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cc4:	079d      	lsls	r5, r3, #30
 8001cc6:	4606      	mov	r6, r0
 8001cc8:	460c      	mov	r4, r1
 8001cca:	d507      	bpl.n	8001cdc <__smakebuf_r+0x1c>
 8001ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001cd0:	6023      	str	r3, [r4, #0]
 8001cd2:	6123      	str	r3, [r4, #16]
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	6163      	str	r3, [r4, #20]
 8001cd8:	b002      	add	sp, #8
 8001cda:	bd70      	pop	{r4, r5, r6, pc}
 8001cdc:	ab01      	add	r3, sp, #4
 8001cde:	466a      	mov	r2, sp
 8001ce0:	f7ff ffca 	bl	8001c78 <__swhatbuf_r>
 8001ce4:	9900      	ldr	r1, [sp, #0]
 8001ce6:	4605      	mov	r5, r0
 8001ce8:	4630      	mov	r0, r6
 8001cea:	f000 f877 	bl	8001ddc <_malloc_r>
 8001cee:	b948      	cbnz	r0, 8001d04 <__smakebuf_r+0x44>
 8001cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cf4:	059a      	lsls	r2, r3, #22
 8001cf6:	d4ef      	bmi.n	8001cd8 <__smakebuf_r+0x18>
 8001cf8:	f023 0303 	bic.w	r3, r3, #3
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	81a3      	strh	r3, [r4, #12]
 8001d02:	e7e3      	b.n	8001ccc <__smakebuf_r+0xc>
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <__smakebuf_r+0x7c>)
 8001d06:	62b3      	str	r3, [r6, #40]	; 0x28
 8001d08:	89a3      	ldrh	r3, [r4, #12]
 8001d0a:	6020      	str	r0, [r4, #0]
 8001d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d10:	81a3      	strh	r3, [r4, #12]
 8001d12:	9b00      	ldr	r3, [sp, #0]
 8001d14:	6163      	str	r3, [r4, #20]
 8001d16:	9b01      	ldr	r3, [sp, #4]
 8001d18:	6120      	str	r0, [r4, #16]
 8001d1a:	b15b      	cbz	r3, 8001d34 <__smakebuf_r+0x74>
 8001d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d20:	4630      	mov	r0, r6
 8001d22:	f000 fc03 	bl	800252c <_isatty_r>
 8001d26:	b128      	cbz	r0, 8001d34 <__smakebuf_r+0x74>
 8001d28:	89a3      	ldrh	r3, [r4, #12]
 8001d2a:	f023 0303 	bic.w	r3, r3, #3
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	81a3      	strh	r3, [r4, #12]
 8001d34:	89a3      	ldrh	r3, [r4, #12]
 8001d36:	431d      	orrs	r5, r3
 8001d38:	81a5      	strh	r5, [r4, #12]
 8001d3a:	e7cd      	b.n	8001cd8 <__smakebuf_r+0x18>
 8001d3c:	08001b2d 	.word	0x08001b2d

08001d40 <_free_r>:
 8001d40:	b538      	push	{r3, r4, r5, lr}
 8001d42:	4605      	mov	r5, r0
 8001d44:	2900      	cmp	r1, #0
 8001d46:	d045      	beq.n	8001dd4 <_free_r+0x94>
 8001d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d4c:	1f0c      	subs	r4, r1, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bfb8      	it	lt
 8001d52:	18e4      	addlt	r4, r4, r3
 8001d54:	f000 fc0c 	bl	8002570 <__malloc_lock>
 8001d58:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <_free_r+0x98>)
 8001d5a:	6813      	ldr	r3, [r2, #0]
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	b933      	cbnz	r3, 8001d6e <_free_r+0x2e>
 8001d60:	6063      	str	r3, [r4, #4]
 8001d62:	6014      	str	r4, [r2, #0]
 8001d64:	4628      	mov	r0, r5
 8001d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d6a:	f000 bc02 	b.w	8002572 <__malloc_unlock>
 8001d6e:	42a3      	cmp	r3, r4
 8001d70:	d90c      	bls.n	8001d8c <_free_r+0x4c>
 8001d72:	6821      	ldr	r1, [r4, #0]
 8001d74:	1862      	adds	r2, r4, r1
 8001d76:	4293      	cmp	r3, r2
 8001d78:	bf04      	itt	eq
 8001d7a:	681a      	ldreq	r2, [r3, #0]
 8001d7c:	685b      	ldreq	r3, [r3, #4]
 8001d7e:	6063      	str	r3, [r4, #4]
 8001d80:	bf04      	itt	eq
 8001d82:	1852      	addeq	r2, r2, r1
 8001d84:	6022      	streq	r2, [r4, #0]
 8001d86:	6004      	str	r4, [r0, #0]
 8001d88:	e7ec      	b.n	8001d64 <_free_r+0x24>
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	b10a      	cbz	r2, 8001d94 <_free_r+0x54>
 8001d90:	42a2      	cmp	r2, r4
 8001d92:	d9fa      	bls.n	8001d8a <_free_r+0x4a>
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	1858      	adds	r0, r3, r1
 8001d98:	42a0      	cmp	r0, r4
 8001d9a:	d10b      	bne.n	8001db4 <_free_r+0x74>
 8001d9c:	6820      	ldr	r0, [r4, #0]
 8001d9e:	4401      	add	r1, r0
 8001da0:	1858      	adds	r0, r3, r1
 8001da2:	4282      	cmp	r2, r0
 8001da4:	6019      	str	r1, [r3, #0]
 8001da6:	d1dd      	bne.n	8001d64 <_free_r+0x24>
 8001da8:	6810      	ldr	r0, [r2, #0]
 8001daa:	6852      	ldr	r2, [r2, #4]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	4401      	add	r1, r0
 8001db0:	6019      	str	r1, [r3, #0]
 8001db2:	e7d7      	b.n	8001d64 <_free_r+0x24>
 8001db4:	d902      	bls.n	8001dbc <_free_r+0x7c>
 8001db6:	230c      	movs	r3, #12
 8001db8:	602b      	str	r3, [r5, #0]
 8001dba:	e7d3      	b.n	8001d64 <_free_r+0x24>
 8001dbc:	6820      	ldr	r0, [r4, #0]
 8001dbe:	1821      	adds	r1, r4, r0
 8001dc0:	428a      	cmp	r2, r1
 8001dc2:	bf04      	itt	eq
 8001dc4:	6811      	ldreq	r1, [r2, #0]
 8001dc6:	6852      	ldreq	r2, [r2, #4]
 8001dc8:	6062      	str	r2, [r4, #4]
 8001dca:	bf04      	itt	eq
 8001dcc:	1809      	addeq	r1, r1, r0
 8001dce:	6021      	streq	r1, [r4, #0]
 8001dd0:	605c      	str	r4, [r3, #4]
 8001dd2:	e7c7      	b.n	8001d64 <_free_r+0x24>
 8001dd4:	bd38      	pop	{r3, r4, r5, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200000a8 	.word	0x200000a8

08001ddc <_malloc_r>:
 8001ddc:	b570      	push	{r4, r5, r6, lr}
 8001dde:	1ccd      	adds	r5, r1, #3
 8001de0:	f025 0503 	bic.w	r5, r5, #3
 8001de4:	3508      	adds	r5, #8
 8001de6:	2d0c      	cmp	r5, #12
 8001de8:	bf38      	it	cc
 8001dea:	250c      	movcc	r5, #12
 8001dec:	2d00      	cmp	r5, #0
 8001dee:	4606      	mov	r6, r0
 8001df0:	db01      	blt.n	8001df6 <_malloc_r+0x1a>
 8001df2:	42a9      	cmp	r1, r5
 8001df4:	d903      	bls.n	8001dfe <_malloc_r+0x22>
 8001df6:	230c      	movs	r3, #12
 8001df8:	6033      	str	r3, [r6, #0]
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}
 8001dfe:	f000 fbb7 	bl	8002570 <__malloc_lock>
 8001e02:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <_malloc_r+0xac>)
 8001e04:	6814      	ldr	r4, [r2, #0]
 8001e06:	4621      	mov	r1, r4
 8001e08:	b991      	cbnz	r1, 8001e30 <_malloc_r+0x54>
 8001e0a:	4c20      	ldr	r4, [pc, #128]	; (8001e8c <_malloc_r+0xb0>)
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	b91b      	cbnz	r3, 8001e18 <_malloc_r+0x3c>
 8001e10:	4630      	mov	r0, r6
 8001e12:	f000 fb03 	bl	800241c <_sbrk_r>
 8001e16:	6020      	str	r0, [r4, #0]
 8001e18:	4629      	mov	r1, r5
 8001e1a:	4630      	mov	r0, r6
 8001e1c:	f000 fafe 	bl	800241c <_sbrk_r>
 8001e20:	1c43      	adds	r3, r0, #1
 8001e22:	d124      	bne.n	8001e6e <_malloc_r+0x92>
 8001e24:	230c      	movs	r3, #12
 8001e26:	6033      	str	r3, [r6, #0]
 8001e28:	4630      	mov	r0, r6
 8001e2a:	f000 fba2 	bl	8002572 <__malloc_unlock>
 8001e2e:	e7e4      	b.n	8001dfa <_malloc_r+0x1e>
 8001e30:	680b      	ldr	r3, [r1, #0]
 8001e32:	1b5b      	subs	r3, r3, r5
 8001e34:	d418      	bmi.n	8001e68 <_malloc_r+0x8c>
 8001e36:	2b0b      	cmp	r3, #11
 8001e38:	d90f      	bls.n	8001e5a <_malloc_r+0x7e>
 8001e3a:	600b      	str	r3, [r1, #0]
 8001e3c:	50cd      	str	r5, [r1, r3]
 8001e3e:	18cc      	adds	r4, r1, r3
 8001e40:	4630      	mov	r0, r6
 8001e42:	f000 fb96 	bl	8002572 <__malloc_unlock>
 8001e46:	f104 000b 	add.w	r0, r4, #11
 8001e4a:	1d23      	adds	r3, r4, #4
 8001e4c:	f020 0007 	bic.w	r0, r0, #7
 8001e50:	1ac3      	subs	r3, r0, r3
 8001e52:	d0d3      	beq.n	8001dfc <_malloc_r+0x20>
 8001e54:	425a      	negs	r2, r3
 8001e56:	50e2      	str	r2, [r4, r3]
 8001e58:	e7d0      	b.n	8001dfc <_malloc_r+0x20>
 8001e5a:	428c      	cmp	r4, r1
 8001e5c:	684b      	ldr	r3, [r1, #4]
 8001e5e:	bf16      	itet	ne
 8001e60:	6063      	strne	r3, [r4, #4]
 8001e62:	6013      	streq	r3, [r2, #0]
 8001e64:	460c      	movne	r4, r1
 8001e66:	e7eb      	b.n	8001e40 <_malloc_r+0x64>
 8001e68:	460c      	mov	r4, r1
 8001e6a:	6849      	ldr	r1, [r1, #4]
 8001e6c:	e7cc      	b.n	8001e08 <_malloc_r+0x2c>
 8001e6e:	1cc4      	adds	r4, r0, #3
 8001e70:	f024 0403 	bic.w	r4, r4, #3
 8001e74:	42a0      	cmp	r0, r4
 8001e76:	d005      	beq.n	8001e84 <_malloc_r+0xa8>
 8001e78:	1a21      	subs	r1, r4, r0
 8001e7a:	4630      	mov	r0, r6
 8001e7c:	f000 face 	bl	800241c <_sbrk_r>
 8001e80:	3001      	adds	r0, #1
 8001e82:	d0cf      	beq.n	8001e24 <_malloc_r+0x48>
 8001e84:	6025      	str	r5, [r4, #0]
 8001e86:	e7db      	b.n	8001e40 <_malloc_r+0x64>
 8001e88:	200000a8 	.word	0x200000a8
 8001e8c:	200000ac 	.word	0x200000ac

08001e90 <__sfputc_r>:
 8001e90:	6893      	ldr	r3, [r2, #8]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	b410      	push	{r4}
 8001e98:	6093      	str	r3, [r2, #8]
 8001e9a:	da07      	bge.n	8001eac <__sfputc_r+0x1c>
 8001e9c:	6994      	ldr	r4, [r2, #24]
 8001e9e:	42a3      	cmp	r3, r4
 8001ea0:	db01      	blt.n	8001ea6 <__sfputc_r+0x16>
 8001ea2:	290a      	cmp	r1, #10
 8001ea4:	d102      	bne.n	8001eac <__sfputc_r+0x1c>
 8001ea6:	bc10      	pop	{r4}
 8001ea8:	f7ff bcac 	b.w	8001804 <__swbuf_r>
 8001eac:	6813      	ldr	r3, [r2, #0]
 8001eae:	1c58      	adds	r0, r3, #1
 8001eb0:	6010      	str	r0, [r2, #0]
 8001eb2:	7019      	strb	r1, [r3, #0]
 8001eb4:	4608      	mov	r0, r1
 8001eb6:	bc10      	pop	{r4}
 8001eb8:	4770      	bx	lr

08001eba <__sfputs_r>:
 8001eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ebc:	4606      	mov	r6, r0
 8001ebe:	460f      	mov	r7, r1
 8001ec0:	4614      	mov	r4, r2
 8001ec2:	18d5      	adds	r5, r2, r3
 8001ec4:	42ac      	cmp	r4, r5
 8001ec6:	d101      	bne.n	8001ecc <__sfputs_r+0x12>
 8001ec8:	2000      	movs	r0, #0
 8001eca:	e007      	b.n	8001edc <__sfputs_r+0x22>
 8001ecc:	463a      	mov	r2, r7
 8001ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ed2:	4630      	mov	r0, r6
 8001ed4:	f7ff ffdc 	bl	8001e90 <__sfputc_r>
 8001ed8:	1c43      	adds	r3, r0, #1
 8001eda:	d1f3      	bne.n	8001ec4 <__sfputs_r+0xa>
 8001edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ee0 <_vfiprintf_r>:
 8001ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ee4:	460c      	mov	r4, r1
 8001ee6:	b09d      	sub	sp, #116	; 0x74
 8001ee8:	4617      	mov	r7, r2
 8001eea:	461d      	mov	r5, r3
 8001eec:	4606      	mov	r6, r0
 8001eee:	b118      	cbz	r0, 8001ef8 <_vfiprintf_r+0x18>
 8001ef0:	6983      	ldr	r3, [r0, #24]
 8001ef2:	b90b      	cbnz	r3, 8001ef8 <_vfiprintf_r+0x18>
 8001ef4:	f7ff fe36 	bl	8001b64 <__sinit>
 8001ef8:	4b7c      	ldr	r3, [pc, #496]	; (80020ec <_vfiprintf_r+0x20c>)
 8001efa:	429c      	cmp	r4, r3
 8001efc:	d158      	bne.n	8001fb0 <_vfiprintf_r+0xd0>
 8001efe:	6874      	ldr	r4, [r6, #4]
 8001f00:	89a3      	ldrh	r3, [r4, #12]
 8001f02:	0718      	lsls	r0, r3, #28
 8001f04:	d55e      	bpl.n	8001fc4 <_vfiprintf_r+0xe4>
 8001f06:	6923      	ldr	r3, [r4, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d05b      	beq.n	8001fc4 <_vfiprintf_r+0xe4>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8001f10:	2320      	movs	r3, #32
 8001f12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f16:	2330      	movs	r3, #48	; 0x30
 8001f18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f1c:	9503      	str	r5, [sp, #12]
 8001f1e:	f04f 0b01 	mov.w	fp, #1
 8001f22:	46b8      	mov	r8, r7
 8001f24:	4645      	mov	r5, r8
 8001f26:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001f2a:	b10b      	cbz	r3, 8001f30 <_vfiprintf_r+0x50>
 8001f2c:	2b25      	cmp	r3, #37	; 0x25
 8001f2e:	d154      	bne.n	8001fda <_vfiprintf_r+0xfa>
 8001f30:	ebb8 0a07 	subs.w	sl, r8, r7
 8001f34:	d00b      	beq.n	8001f4e <_vfiprintf_r+0x6e>
 8001f36:	4653      	mov	r3, sl
 8001f38:	463a      	mov	r2, r7
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	4630      	mov	r0, r6
 8001f3e:	f7ff ffbc 	bl	8001eba <__sfputs_r>
 8001f42:	3001      	adds	r0, #1
 8001f44:	f000 80c2 	beq.w	80020cc <_vfiprintf_r+0x1ec>
 8001f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f4a:	4453      	add	r3, sl
 8001f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8001f4e:	f898 3000 	ldrb.w	r3, [r8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80ba 	beq.w	80020cc <_vfiprintf_r+0x1ec>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f62:	9304      	str	r3, [sp, #16]
 8001f64:	9307      	str	r3, [sp, #28]
 8001f66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f6a:	931a      	str	r3, [sp, #104]	; 0x68
 8001f6c:	46a8      	mov	r8, r5
 8001f6e:	2205      	movs	r2, #5
 8001f70:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001f74:	485e      	ldr	r0, [pc, #376]	; (80020f0 <_vfiprintf_r+0x210>)
 8001f76:	f7fe f953 	bl	8000220 <memchr>
 8001f7a:	9b04      	ldr	r3, [sp, #16]
 8001f7c:	bb78      	cbnz	r0, 8001fde <_vfiprintf_r+0xfe>
 8001f7e:	06d9      	lsls	r1, r3, #27
 8001f80:	bf44      	itt	mi
 8001f82:	2220      	movmi	r2, #32
 8001f84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f88:	071a      	lsls	r2, r3, #28
 8001f8a:	bf44      	itt	mi
 8001f8c:	222b      	movmi	r2, #43	; 0x2b
 8001f8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f92:	782a      	ldrb	r2, [r5, #0]
 8001f94:	2a2a      	cmp	r2, #42	; 0x2a
 8001f96:	d02a      	beq.n	8001fee <_vfiprintf_r+0x10e>
 8001f98:	9a07      	ldr	r2, [sp, #28]
 8001f9a:	46a8      	mov	r8, r5
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	250a      	movs	r5, #10
 8001fa0:	4641      	mov	r1, r8
 8001fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fa6:	3b30      	subs	r3, #48	; 0x30
 8001fa8:	2b09      	cmp	r3, #9
 8001faa:	d969      	bls.n	8002080 <_vfiprintf_r+0x1a0>
 8001fac:	b360      	cbz	r0, 8002008 <_vfiprintf_r+0x128>
 8001fae:	e024      	b.n	8001ffa <_vfiprintf_r+0x11a>
 8001fb0:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <_vfiprintf_r+0x214>)
 8001fb2:	429c      	cmp	r4, r3
 8001fb4:	d101      	bne.n	8001fba <_vfiprintf_r+0xda>
 8001fb6:	68b4      	ldr	r4, [r6, #8]
 8001fb8:	e7a2      	b.n	8001f00 <_vfiprintf_r+0x20>
 8001fba:	4b4f      	ldr	r3, [pc, #316]	; (80020f8 <_vfiprintf_r+0x218>)
 8001fbc:	429c      	cmp	r4, r3
 8001fbe:	bf08      	it	eq
 8001fc0:	68f4      	ldreq	r4, [r6, #12]
 8001fc2:	e79d      	b.n	8001f00 <_vfiprintf_r+0x20>
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	4630      	mov	r0, r6
 8001fc8:	f7ff fc6e 	bl	80018a8 <__swsetup_r>
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d09d      	beq.n	8001f0c <_vfiprintf_r+0x2c>
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	b01d      	add	sp, #116	; 0x74
 8001fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fda:	46a8      	mov	r8, r5
 8001fdc:	e7a2      	b.n	8001f24 <_vfiprintf_r+0x44>
 8001fde:	4a44      	ldr	r2, [pc, #272]	; (80020f0 <_vfiprintf_r+0x210>)
 8001fe0:	1a80      	subs	r0, r0, r2
 8001fe2:	fa0b f000 	lsl.w	r0, fp, r0
 8001fe6:	4318      	orrs	r0, r3
 8001fe8:	9004      	str	r0, [sp, #16]
 8001fea:	4645      	mov	r5, r8
 8001fec:	e7be      	b.n	8001f6c <_vfiprintf_r+0x8c>
 8001fee:	9a03      	ldr	r2, [sp, #12]
 8001ff0:	1d11      	adds	r1, r2, #4
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	9103      	str	r1, [sp, #12]
 8001ff6:	2a00      	cmp	r2, #0
 8001ff8:	db01      	blt.n	8001ffe <_vfiprintf_r+0x11e>
 8001ffa:	9207      	str	r2, [sp, #28]
 8001ffc:	e004      	b.n	8002008 <_vfiprintf_r+0x128>
 8001ffe:	4252      	negs	r2, r2
 8002000:	f043 0302 	orr.w	r3, r3, #2
 8002004:	9207      	str	r2, [sp, #28]
 8002006:	9304      	str	r3, [sp, #16]
 8002008:	f898 3000 	ldrb.w	r3, [r8]
 800200c:	2b2e      	cmp	r3, #46	; 0x2e
 800200e:	d10e      	bne.n	800202e <_vfiprintf_r+0x14e>
 8002010:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002014:	2b2a      	cmp	r3, #42	; 0x2a
 8002016:	d138      	bne.n	800208a <_vfiprintf_r+0x1aa>
 8002018:	9b03      	ldr	r3, [sp, #12]
 800201a:	1d1a      	adds	r2, r3, #4
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	9203      	str	r2, [sp, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	bfb8      	it	lt
 8002024:	f04f 33ff 	movlt.w	r3, #4294967295
 8002028:	f108 0802 	add.w	r8, r8, #2
 800202c:	9305      	str	r3, [sp, #20]
 800202e:	4d33      	ldr	r5, [pc, #204]	; (80020fc <_vfiprintf_r+0x21c>)
 8002030:	f898 1000 	ldrb.w	r1, [r8]
 8002034:	2203      	movs	r2, #3
 8002036:	4628      	mov	r0, r5
 8002038:	f7fe f8f2 	bl	8000220 <memchr>
 800203c:	b140      	cbz	r0, 8002050 <_vfiprintf_r+0x170>
 800203e:	2340      	movs	r3, #64	; 0x40
 8002040:	1b40      	subs	r0, r0, r5
 8002042:	fa03 f000 	lsl.w	r0, r3, r0
 8002046:	9b04      	ldr	r3, [sp, #16]
 8002048:	4303      	orrs	r3, r0
 800204a:	f108 0801 	add.w	r8, r8, #1
 800204e:	9304      	str	r3, [sp, #16]
 8002050:	f898 1000 	ldrb.w	r1, [r8]
 8002054:	482a      	ldr	r0, [pc, #168]	; (8002100 <_vfiprintf_r+0x220>)
 8002056:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800205a:	2206      	movs	r2, #6
 800205c:	f108 0701 	add.w	r7, r8, #1
 8002060:	f7fe f8de 	bl	8000220 <memchr>
 8002064:	2800      	cmp	r0, #0
 8002066:	d037      	beq.n	80020d8 <_vfiprintf_r+0x1f8>
 8002068:	4b26      	ldr	r3, [pc, #152]	; (8002104 <_vfiprintf_r+0x224>)
 800206a:	bb1b      	cbnz	r3, 80020b4 <_vfiprintf_r+0x1d4>
 800206c:	9b03      	ldr	r3, [sp, #12]
 800206e:	3307      	adds	r3, #7
 8002070:	f023 0307 	bic.w	r3, r3, #7
 8002074:	3308      	adds	r3, #8
 8002076:	9303      	str	r3, [sp, #12]
 8002078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800207a:	444b      	add	r3, r9
 800207c:	9309      	str	r3, [sp, #36]	; 0x24
 800207e:	e750      	b.n	8001f22 <_vfiprintf_r+0x42>
 8002080:	fb05 3202 	mla	r2, r5, r2, r3
 8002084:	2001      	movs	r0, #1
 8002086:	4688      	mov	r8, r1
 8002088:	e78a      	b.n	8001fa0 <_vfiprintf_r+0xc0>
 800208a:	2300      	movs	r3, #0
 800208c:	f108 0801 	add.w	r8, r8, #1
 8002090:	9305      	str	r3, [sp, #20]
 8002092:	4619      	mov	r1, r3
 8002094:	250a      	movs	r5, #10
 8002096:	4640      	mov	r0, r8
 8002098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800209c:	3a30      	subs	r2, #48	; 0x30
 800209e:	2a09      	cmp	r2, #9
 80020a0:	d903      	bls.n	80020aa <_vfiprintf_r+0x1ca>
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0c3      	beq.n	800202e <_vfiprintf_r+0x14e>
 80020a6:	9105      	str	r1, [sp, #20]
 80020a8:	e7c1      	b.n	800202e <_vfiprintf_r+0x14e>
 80020aa:	fb05 2101 	mla	r1, r5, r1, r2
 80020ae:	2301      	movs	r3, #1
 80020b0:	4680      	mov	r8, r0
 80020b2:	e7f0      	b.n	8002096 <_vfiprintf_r+0x1b6>
 80020b4:	ab03      	add	r3, sp, #12
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	4622      	mov	r2, r4
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <_vfiprintf_r+0x228>)
 80020bc:	a904      	add	r1, sp, #16
 80020be:	4630      	mov	r0, r6
 80020c0:	f3af 8000 	nop.w
 80020c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80020c8:	4681      	mov	r9, r0
 80020ca:	d1d5      	bne.n	8002078 <_vfiprintf_r+0x198>
 80020cc:	89a3      	ldrh	r3, [r4, #12]
 80020ce:	065b      	lsls	r3, r3, #25
 80020d0:	f53f af7e 	bmi.w	8001fd0 <_vfiprintf_r+0xf0>
 80020d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020d6:	e77d      	b.n	8001fd4 <_vfiprintf_r+0xf4>
 80020d8:	ab03      	add	r3, sp, #12
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	4622      	mov	r2, r4
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <_vfiprintf_r+0x228>)
 80020e0:	a904      	add	r1, sp, #16
 80020e2:	4630      	mov	r0, r6
 80020e4:	f000 f888 	bl	80021f8 <_printf_i>
 80020e8:	e7ec      	b.n	80020c4 <_vfiprintf_r+0x1e4>
 80020ea:	bf00      	nop
 80020ec:	0800264c 	.word	0x0800264c
 80020f0:	0800268c 	.word	0x0800268c
 80020f4:	0800266c 	.word	0x0800266c
 80020f8:	0800262c 	.word	0x0800262c
 80020fc:	08002692 	.word	0x08002692
 8002100:	08002696 	.word	0x08002696
 8002104:	00000000 	.word	0x00000000
 8002108:	08001ebb 	.word	0x08001ebb

0800210c <_printf_common>:
 800210c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002110:	4691      	mov	r9, r2
 8002112:	461f      	mov	r7, r3
 8002114:	688a      	ldr	r2, [r1, #8]
 8002116:	690b      	ldr	r3, [r1, #16]
 8002118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800211c:	4293      	cmp	r3, r2
 800211e:	bfb8      	it	lt
 8002120:	4613      	movlt	r3, r2
 8002122:	f8c9 3000 	str.w	r3, [r9]
 8002126:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800212a:	4606      	mov	r6, r0
 800212c:	460c      	mov	r4, r1
 800212e:	b112      	cbz	r2, 8002136 <_printf_common+0x2a>
 8002130:	3301      	adds	r3, #1
 8002132:	f8c9 3000 	str.w	r3, [r9]
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	0699      	lsls	r1, r3, #26
 800213a:	bf42      	ittt	mi
 800213c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002140:	3302      	addmi	r3, #2
 8002142:	f8c9 3000 	strmi.w	r3, [r9]
 8002146:	6825      	ldr	r5, [r4, #0]
 8002148:	f015 0506 	ands.w	r5, r5, #6
 800214c:	d107      	bne.n	800215e <_printf_common+0x52>
 800214e:	f104 0a19 	add.w	sl, r4, #25
 8002152:	68e3      	ldr	r3, [r4, #12]
 8002154:	f8d9 2000 	ldr.w	r2, [r9]
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	42ab      	cmp	r3, r5
 800215c:	dc28      	bgt.n	80021b0 <_printf_common+0xa4>
 800215e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002162:	6822      	ldr	r2, [r4, #0]
 8002164:	3300      	adds	r3, #0
 8002166:	bf18      	it	ne
 8002168:	2301      	movne	r3, #1
 800216a:	0692      	lsls	r2, r2, #26
 800216c:	d42d      	bmi.n	80021ca <_printf_common+0xbe>
 800216e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002172:	4639      	mov	r1, r7
 8002174:	4630      	mov	r0, r6
 8002176:	47c0      	blx	r8
 8002178:	3001      	adds	r0, #1
 800217a:	d020      	beq.n	80021be <_printf_common+0xb2>
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	68e5      	ldr	r5, [r4, #12]
 8002180:	f8d9 2000 	ldr.w	r2, [r9]
 8002184:	f003 0306 	and.w	r3, r3, #6
 8002188:	2b04      	cmp	r3, #4
 800218a:	bf08      	it	eq
 800218c:	1aad      	subeq	r5, r5, r2
 800218e:	68a3      	ldr	r3, [r4, #8]
 8002190:	6922      	ldr	r2, [r4, #16]
 8002192:	bf0c      	ite	eq
 8002194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002198:	2500      	movne	r5, #0
 800219a:	4293      	cmp	r3, r2
 800219c:	bfc4      	itt	gt
 800219e:	1a9b      	subgt	r3, r3, r2
 80021a0:	18ed      	addgt	r5, r5, r3
 80021a2:	f04f 0900 	mov.w	r9, #0
 80021a6:	341a      	adds	r4, #26
 80021a8:	454d      	cmp	r5, r9
 80021aa:	d11a      	bne.n	80021e2 <_printf_common+0xd6>
 80021ac:	2000      	movs	r0, #0
 80021ae:	e008      	b.n	80021c2 <_printf_common+0xb6>
 80021b0:	2301      	movs	r3, #1
 80021b2:	4652      	mov	r2, sl
 80021b4:	4639      	mov	r1, r7
 80021b6:	4630      	mov	r0, r6
 80021b8:	47c0      	blx	r8
 80021ba:	3001      	adds	r0, #1
 80021bc:	d103      	bne.n	80021c6 <_printf_common+0xba>
 80021be:	f04f 30ff 	mov.w	r0, #4294967295
 80021c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021c6:	3501      	adds	r5, #1
 80021c8:	e7c3      	b.n	8002152 <_printf_common+0x46>
 80021ca:	18e1      	adds	r1, r4, r3
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	2030      	movs	r0, #48	; 0x30
 80021d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021d4:	4422      	add	r2, r4
 80021d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021de:	3302      	adds	r3, #2
 80021e0:	e7c5      	b.n	800216e <_printf_common+0x62>
 80021e2:	2301      	movs	r3, #1
 80021e4:	4622      	mov	r2, r4
 80021e6:	4639      	mov	r1, r7
 80021e8:	4630      	mov	r0, r6
 80021ea:	47c0      	blx	r8
 80021ec:	3001      	adds	r0, #1
 80021ee:	d0e6      	beq.n	80021be <_printf_common+0xb2>
 80021f0:	f109 0901 	add.w	r9, r9, #1
 80021f4:	e7d8      	b.n	80021a8 <_printf_common+0x9c>
	...

080021f8 <_printf_i>:
 80021f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002200:	460c      	mov	r4, r1
 8002202:	7e09      	ldrb	r1, [r1, #24]
 8002204:	b085      	sub	sp, #20
 8002206:	296e      	cmp	r1, #110	; 0x6e
 8002208:	4617      	mov	r7, r2
 800220a:	4606      	mov	r6, r0
 800220c:	4698      	mov	r8, r3
 800220e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002210:	f000 80b3 	beq.w	800237a <_printf_i+0x182>
 8002214:	d822      	bhi.n	800225c <_printf_i+0x64>
 8002216:	2963      	cmp	r1, #99	; 0x63
 8002218:	d036      	beq.n	8002288 <_printf_i+0x90>
 800221a:	d80a      	bhi.n	8002232 <_printf_i+0x3a>
 800221c:	2900      	cmp	r1, #0
 800221e:	f000 80b9 	beq.w	8002394 <_printf_i+0x19c>
 8002222:	2958      	cmp	r1, #88	; 0x58
 8002224:	f000 8083 	beq.w	800232e <_printf_i+0x136>
 8002228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800222c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002230:	e032      	b.n	8002298 <_printf_i+0xa0>
 8002232:	2964      	cmp	r1, #100	; 0x64
 8002234:	d001      	beq.n	800223a <_printf_i+0x42>
 8002236:	2969      	cmp	r1, #105	; 0x69
 8002238:	d1f6      	bne.n	8002228 <_printf_i+0x30>
 800223a:	6820      	ldr	r0, [r4, #0]
 800223c:	6813      	ldr	r3, [r2, #0]
 800223e:	0605      	lsls	r5, r0, #24
 8002240:	f103 0104 	add.w	r1, r3, #4
 8002244:	d52a      	bpl.n	800229c <_printf_i+0xa4>
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6011      	str	r1, [r2, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	da03      	bge.n	8002256 <_printf_i+0x5e>
 800224e:	222d      	movs	r2, #45	; 0x2d
 8002250:	425b      	negs	r3, r3
 8002252:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002256:	486f      	ldr	r0, [pc, #444]	; (8002414 <_printf_i+0x21c>)
 8002258:	220a      	movs	r2, #10
 800225a:	e039      	b.n	80022d0 <_printf_i+0xd8>
 800225c:	2973      	cmp	r1, #115	; 0x73
 800225e:	f000 809d 	beq.w	800239c <_printf_i+0x1a4>
 8002262:	d808      	bhi.n	8002276 <_printf_i+0x7e>
 8002264:	296f      	cmp	r1, #111	; 0x6f
 8002266:	d020      	beq.n	80022aa <_printf_i+0xb2>
 8002268:	2970      	cmp	r1, #112	; 0x70
 800226a:	d1dd      	bne.n	8002228 <_printf_i+0x30>
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	f043 0320 	orr.w	r3, r3, #32
 8002272:	6023      	str	r3, [r4, #0]
 8002274:	e003      	b.n	800227e <_printf_i+0x86>
 8002276:	2975      	cmp	r1, #117	; 0x75
 8002278:	d017      	beq.n	80022aa <_printf_i+0xb2>
 800227a:	2978      	cmp	r1, #120	; 0x78
 800227c:	d1d4      	bne.n	8002228 <_printf_i+0x30>
 800227e:	2378      	movs	r3, #120	; 0x78
 8002280:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002284:	4864      	ldr	r0, [pc, #400]	; (8002418 <_printf_i+0x220>)
 8002286:	e055      	b.n	8002334 <_printf_i+0x13c>
 8002288:	6813      	ldr	r3, [r2, #0]
 800228a:	1d19      	adds	r1, r3, #4
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6011      	str	r1, [r2, #0]
 8002290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002298:	2301      	movs	r3, #1
 800229a:	e08c      	b.n	80023b6 <_printf_i+0x1be>
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6011      	str	r1, [r2, #0]
 80022a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022a4:	bf18      	it	ne
 80022a6:	b21b      	sxthne	r3, r3
 80022a8:	e7cf      	b.n	800224a <_printf_i+0x52>
 80022aa:	6813      	ldr	r3, [r2, #0]
 80022ac:	6825      	ldr	r5, [r4, #0]
 80022ae:	1d18      	adds	r0, r3, #4
 80022b0:	6010      	str	r0, [r2, #0]
 80022b2:	0628      	lsls	r0, r5, #24
 80022b4:	d501      	bpl.n	80022ba <_printf_i+0xc2>
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	e002      	b.n	80022c0 <_printf_i+0xc8>
 80022ba:	0668      	lsls	r0, r5, #25
 80022bc:	d5fb      	bpl.n	80022b6 <_printf_i+0xbe>
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	4854      	ldr	r0, [pc, #336]	; (8002414 <_printf_i+0x21c>)
 80022c2:	296f      	cmp	r1, #111	; 0x6f
 80022c4:	bf14      	ite	ne
 80022c6:	220a      	movne	r2, #10
 80022c8:	2208      	moveq	r2, #8
 80022ca:	2100      	movs	r1, #0
 80022cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022d0:	6865      	ldr	r5, [r4, #4]
 80022d2:	60a5      	str	r5, [r4, #8]
 80022d4:	2d00      	cmp	r5, #0
 80022d6:	f2c0 8095 	blt.w	8002404 <_printf_i+0x20c>
 80022da:	6821      	ldr	r1, [r4, #0]
 80022dc:	f021 0104 	bic.w	r1, r1, #4
 80022e0:	6021      	str	r1, [r4, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d13d      	bne.n	8002362 <_printf_i+0x16a>
 80022e6:	2d00      	cmp	r5, #0
 80022e8:	f040 808e 	bne.w	8002408 <_printf_i+0x210>
 80022ec:	4665      	mov	r5, ip
 80022ee:	2a08      	cmp	r2, #8
 80022f0:	d10b      	bne.n	800230a <_printf_i+0x112>
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	07db      	lsls	r3, r3, #31
 80022f6:	d508      	bpl.n	800230a <_printf_i+0x112>
 80022f8:	6923      	ldr	r3, [r4, #16]
 80022fa:	6862      	ldr	r2, [r4, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	bfde      	ittt	le
 8002300:	2330      	movle	r3, #48	; 0x30
 8002302:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002306:	f105 35ff 	addle.w	r5, r5, #4294967295
 800230a:	ebac 0305 	sub.w	r3, ip, r5
 800230e:	6123      	str	r3, [r4, #16]
 8002310:	f8cd 8000 	str.w	r8, [sp]
 8002314:	463b      	mov	r3, r7
 8002316:	aa03      	add	r2, sp, #12
 8002318:	4621      	mov	r1, r4
 800231a:	4630      	mov	r0, r6
 800231c:	f7ff fef6 	bl	800210c <_printf_common>
 8002320:	3001      	adds	r0, #1
 8002322:	d14d      	bne.n	80023c0 <_printf_i+0x1c8>
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	b005      	add	sp, #20
 800232a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800232e:	4839      	ldr	r0, [pc, #228]	; (8002414 <_printf_i+0x21c>)
 8002330:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002334:	6813      	ldr	r3, [r2, #0]
 8002336:	6821      	ldr	r1, [r4, #0]
 8002338:	1d1d      	adds	r5, r3, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6015      	str	r5, [r2, #0]
 800233e:	060a      	lsls	r2, r1, #24
 8002340:	d50b      	bpl.n	800235a <_printf_i+0x162>
 8002342:	07ca      	lsls	r2, r1, #31
 8002344:	bf44      	itt	mi
 8002346:	f041 0120 	orrmi.w	r1, r1, #32
 800234a:	6021      	strmi	r1, [r4, #0]
 800234c:	b91b      	cbnz	r3, 8002356 <_printf_i+0x15e>
 800234e:	6822      	ldr	r2, [r4, #0]
 8002350:	f022 0220 	bic.w	r2, r2, #32
 8002354:	6022      	str	r2, [r4, #0]
 8002356:	2210      	movs	r2, #16
 8002358:	e7b7      	b.n	80022ca <_printf_i+0xd2>
 800235a:	064d      	lsls	r5, r1, #25
 800235c:	bf48      	it	mi
 800235e:	b29b      	uxthmi	r3, r3
 8002360:	e7ef      	b.n	8002342 <_printf_i+0x14a>
 8002362:	4665      	mov	r5, ip
 8002364:	fbb3 f1f2 	udiv	r1, r3, r2
 8002368:	fb02 3311 	mls	r3, r2, r1, r3
 800236c:	5cc3      	ldrb	r3, [r0, r3]
 800236e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002372:	460b      	mov	r3, r1
 8002374:	2900      	cmp	r1, #0
 8002376:	d1f5      	bne.n	8002364 <_printf_i+0x16c>
 8002378:	e7b9      	b.n	80022ee <_printf_i+0xf6>
 800237a:	6813      	ldr	r3, [r2, #0]
 800237c:	6825      	ldr	r5, [r4, #0]
 800237e:	6961      	ldr	r1, [r4, #20]
 8002380:	1d18      	adds	r0, r3, #4
 8002382:	6010      	str	r0, [r2, #0]
 8002384:	0628      	lsls	r0, r5, #24
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	d501      	bpl.n	800238e <_printf_i+0x196>
 800238a:	6019      	str	r1, [r3, #0]
 800238c:	e002      	b.n	8002394 <_printf_i+0x19c>
 800238e:	066a      	lsls	r2, r5, #25
 8002390:	d5fb      	bpl.n	800238a <_printf_i+0x192>
 8002392:	8019      	strh	r1, [r3, #0]
 8002394:	2300      	movs	r3, #0
 8002396:	6123      	str	r3, [r4, #16]
 8002398:	4665      	mov	r5, ip
 800239a:	e7b9      	b.n	8002310 <_printf_i+0x118>
 800239c:	6813      	ldr	r3, [r2, #0]
 800239e:	1d19      	adds	r1, r3, #4
 80023a0:	6011      	str	r1, [r2, #0]
 80023a2:	681d      	ldr	r5, [r3, #0]
 80023a4:	6862      	ldr	r2, [r4, #4]
 80023a6:	2100      	movs	r1, #0
 80023a8:	4628      	mov	r0, r5
 80023aa:	f7fd ff39 	bl	8000220 <memchr>
 80023ae:	b108      	cbz	r0, 80023b4 <_printf_i+0x1bc>
 80023b0:	1b40      	subs	r0, r0, r5
 80023b2:	6060      	str	r0, [r4, #4]
 80023b4:	6863      	ldr	r3, [r4, #4]
 80023b6:	6123      	str	r3, [r4, #16]
 80023b8:	2300      	movs	r3, #0
 80023ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023be:	e7a7      	b.n	8002310 <_printf_i+0x118>
 80023c0:	6923      	ldr	r3, [r4, #16]
 80023c2:	462a      	mov	r2, r5
 80023c4:	4639      	mov	r1, r7
 80023c6:	4630      	mov	r0, r6
 80023c8:	47c0      	blx	r8
 80023ca:	3001      	adds	r0, #1
 80023cc:	d0aa      	beq.n	8002324 <_printf_i+0x12c>
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	079b      	lsls	r3, r3, #30
 80023d2:	d413      	bmi.n	80023fc <_printf_i+0x204>
 80023d4:	68e0      	ldr	r0, [r4, #12]
 80023d6:	9b03      	ldr	r3, [sp, #12]
 80023d8:	4298      	cmp	r0, r3
 80023da:	bfb8      	it	lt
 80023dc:	4618      	movlt	r0, r3
 80023de:	e7a3      	b.n	8002328 <_printf_i+0x130>
 80023e0:	2301      	movs	r3, #1
 80023e2:	464a      	mov	r2, r9
 80023e4:	4639      	mov	r1, r7
 80023e6:	4630      	mov	r0, r6
 80023e8:	47c0      	blx	r8
 80023ea:	3001      	adds	r0, #1
 80023ec:	d09a      	beq.n	8002324 <_printf_i+0x12c>
 80023ee:	3501      	adds	r5, #1
 80023f0:	68e3      	ldr	r3, [r4, #12]
 80023f2:	9a03      	ldr	r2, [sp, #12]
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	42ab      	cmp	r3, r5
 80023f8:	dcf2      	bgt.n	80023e0 <_printf_i+0x1e8>
 80023fa:	e7eb      	b.n	80023d4 <_printf_i+0x1dc>
 80023fc:	2500      	movs	r5, #0
 80023fe:	f104 0919 	add.w	r9, r4, #25
 8002402:	e7f5      	b.n	80023f0 <_printf_i+0x1f8>
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1ac      	bne.n	8002362 <_printf_i+0x16a>
 8002408:	7803      	ldrb	r3, [r0, #0]
 800240a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800240e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002412:	e76c      	b.n	80022ee <_printf_i+0xf6>
 8002414:	0800269d 	.word	0x0800269d
 8002418:	080026ae 	.word	0x080026ae

0800241c <_sbrk_r>:
 800241c:	b538      	push	{r3, r4, r5, lr}
 800241e:	4c06      	ldr	r4, [pc, #24]	; (8002438 <_sbrk_r+0x1c>)
 8002420:	2300      	movs	r3, #0
 8002422:	4605      	mov	r5, r0
 8002424:	4608      	mov	r0, r1
 8002426:	6023      	str	r3, [r4, #0]
 8002428:	f7fe f8f2 	bl	8000610 <_sbrk>
 800242c:	1c43      	adds	r3, r0, #1
 800242e:	d102      	bne.n	8002436 <_sbrk_r+0x1a>
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	b103      	cbz	r3, 8002436 <_sbrk_r+0x1a>
 8002434:	602b      	str	r3, [r5, #0]
 8002436:	bd38      	pop	{r3, r4, r5, pc}
 8002438:	200004d4 	.word	0x200004d4

0800243c <__sread>:
 800243c:	b510      	push	{r4, lr}
 800243e:	460c      	mov	r4, r1
 8002440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002444:	f000 f896 	bl	8002574 <_read_r>
 8002448:	2800      	cmp	r0, #0
 800244a:	bfab      	itete	ge
 800244c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800244e:	89a3      	ldrhlt	r3, [r4, #12]
 8002450:	181b      	addge	r3, r3, r0
 8002452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002456:	bfac      	ite	ge
 8002458:	6563      	strge	r3, [r4, #84]	; 0x54
 800245a:	81a3      	strhlt	r3, [r4, #12]
 800245c:	bd10      	pop	{r4, pc}

0800245e <__swrite>:
 800245e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002462:	461f      	mov	r7, r3
 8002464:	898b      	ldrh	r3, [r1, #12]
 8002466:	05db      	lsls	r3, r3, #23
 8002468:	4605      	mov	r5, r0
 800246a:	460c      	mov	r4, r1
 800246c:	4616      	mov	r6, r2
 800246e:	d505      	bpl.n	800247c <__swrite+0x1e>
 8002470:	2302      	movs	r3, #2
 8002472:	2200      	movs	r2, #0
 8002474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002478:	f000 f868 	bl	800254c <_lseek_r>
 800247c:	89a3      	ldrh	r3, [r4, #12]
 800247e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002486:	81a3      	strh	r3, [r4, #12]
 8002488:	4632      	mov	r2, r6
 800248a:	463b      	mov	r3, r7
 800248c:	4628      	mov	r0, r5
 800248e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002492:	f000 b817 	b.w	80024c4 <_write_r>

08002496 <__sseek>:
 8002496:	b510      	push	{r4, lr}
 8002498:	460c      	mov	r4, r1
 800249a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800249e:	f000 f855 	bl	800254c <_lseek_r>
 80024a2:	1c43      	adds	r3, r0, #1
 80024a4:	89a3      	ldrh	r3, [r4, #12]
 80024a6:	bf15      	itete	ne
 80024a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80024aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024b2:	81a3      	strheq	r3, [r4, #12]
 80024b4:	bf18      	it	ne
 80024b6:	81a3      	strhne	r3, [r4, #12]
 80024b8:	bd10      	pop	{r4, pc}

080024ba <__sclose>:
 80024ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024be:	f000 b813 	b.w	80024e8 <_close_r>
	...

080024c4 <_write_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4c07      	ldr	r4, [pc, #28]	; (80024e4 <_write_r+0x20>)
 80024c8:	4605      	mov	r5, r0
 80024ca:	4608      	mov	r0, r1
 80024cc:	4611      	mov	r1, r2
 80024ce:	2200      	movs	r2, #0
 80024d0:	6022      	str	r2, [r4, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f7fe f84f 	bl	8000576 <_write>
 80024d8:	1c43      	adds	r3, r0, #1
 80024da:	d102      	bne.n	80024e2 <_write_r+0x1e>
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	b103      	cbz	r3, 80024e2 <_write_r+0x1e>
 80024e0:	602b      	str	r3, [r5, #0]
 80024e2:	bd38      	pop	{r3, r4, r5, pc}
 80024e4:	200004d4 	.word	0x200004d4

080024e8 <_close_r>:
 80024e8:	b538      	push	{r3, r4, r5, lr}
 80024ea:	4c06      	ldr	r4, [pc, #24]	; (8002504 <_close_r+0x1c>)
 80024ec:	2300      	movs	r3, #0
 80024ee:	4605      	mov	r5, r0
 80024f0:	4608      	mov	r0, r1
 80024f2:	6023      	str	r3, [r4, #0]
 80024f4:	f7fe f85b 	bl	80005ae <_close>
 80024f8:	1c43      	adds	r3, r0, #1
 80024fa:	d102      	bne.n	8002502 <_close_r+0x1a>
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	b103      	cbz	r3, 8002502 <_close_r+0x1a>
 8002500:	602b      	str	r3, [r5, #0]
 8002502:	bd38      	pop	{r3, r4, r5, pc}
 8002504:	200004d4 	.word	0x200004d4

08002508 <_fstat_r>:
 8002508:	b538      	push	{r3, r4, r5, lr}
 800250a:	4c07      	ldr	r4, [pc, #28]	; (8002528 <_fstat_r+0x20>)
 800250c:	2300      	movs	r3, #0
 800250e:	4605      	mov	r5, r0
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	6023      	str	r3, [r4, #0]
 8002516:	f7fe f855 	bl	80005c4 <_fstat>
 800251a:	1c43      	adds	r3, r0, #1
 800251c:	d102      	bne.n	8002524 <_fstat_r+0x1c>
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	b103      	cbz	r3, 8002524 <_fstat_r+0x1c>
 8002522:	602b      	str	r3, [r5, #0]
 8002524:	bd38      	pop	{r3, r4, r5, pc}
 8002526:	bf00      	nop
 8002528:	200004d4 	.word	0x200004d4

0800252c <_isatty_r>:
 800252c:	b538      	push	{r3, r4, r5, lr}
 800252e:	4c06      	ldr	r4, [pc, #24]	; (8002548 <_isatty_r+0x1c>)
 8002530:	2300      	movs	r3, #0
 8002532:	4605      	mov	r5, r0
 8002534:	4608      	mov	r0, r1
 8002536:	6023      	str	r3, [r4, #0]
 8002538:	f7fe f853 	bl	80005e2 <_isatty>
 800253c:	1c43      	adds	r3, r0, #1
 800253e:	d102      	bne.n	8002546 <_isatty_r+0x1a>
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	b103      	cbz	r3, 8002546 <_isatty_r+0x1a>
 8002544:	602b      	str	r3, [r5, #0]
 8002546:	bd38      	pop	{r3, r4, r5, pc}
 8002548:	200004d4 	.word	0x200004d4

0800254c <_lseek_r>:
 800254c:	b538      	push	{r3, r4, r5, lr}
 800254e:	4c07      	ldr	r4, [pc, #28]	; (800256c <_lseek_r+0x20>)
 8002550:	4605      	mov	r5, r0
 8002552:	4608      	mov	r0, r1
 8002554:	4611      	mov	r1, r2
 8002556:	2200      	movs	r2, #0
 8002558:	6022      	str	r2, [r4, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	f7fe f84b 	bl	80005f6 <_lseek>
 8002560:	1c43      	adds	r3, r0, #1
 8002562:	d102      	bne.n	800256a <_lseek_r+0x1e>
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	b103      	cbz	r3, 800256a <_lseek_r+0x1e>
 8002568:	602b      	str	r3, [r5, #0]
 800256a:	bd38      	pop	{r3, r4, r5, pc}
 800256c:	200004d4 	.word	0x200004d4

08002570 <__malloc_lock>:
 8002570:	4770      	bx	lr

08002572 <__malloc_unlock>:
 8002572:	4770      	bx	lr

08002574 <_read_r>:
 8002574:	b538      	push	{r3, r4, r5, lr}
 8002576:	4c07      	ldr	r4, [pc, #28]	; (8002594 <_read_r+0x20>)
 8002578:	4605      	mov	r5, r0
 800257a:	4608      	mov	r0, r1
 800257c:	4611      	mov	r1, r2
 800257e:	2200      	movs	r2, #0
 8002580:	6022      	str	r2, [r4, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	f7fd ffda 	bl	800053c <_read>
 8002588:	1c43      	adds	r3, r0, #1
 800258a:	d102      	bne.n	8002592 <_read_r+0x1e>
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	b103      	cbz	r3, 8002592 <_read_r+0x1e>
 8002590:	602b      	str	r3, [r5, #0]
 8002592:	bd38      	pop	{r3, r4, r5, pc}
 8002594:	200004d4 	.word	0x200004d4

08002598 <_init>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	bf00      	nop
 800259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259e:	bc08      	pop	{r3}
 80025a0:	469e      	mov	lr, r3
 80025a2:	4770      	bx	lr

080025a4 <_fini>:
 80025a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a6:	bf00      	nop
 80025a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025aa:	bc08      	pop	{r3}
 80025ac:	469e      	mov	lr, r3
 80025ae:	4770      	bx	lr
